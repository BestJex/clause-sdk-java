/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 意图槽位
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-07")
public class IntentSlot implements org.apache.thrift.TBase<IntentSlot, IntentSlot._Fields>, java.io.Serializable, Cloneable, Comparable<IntentSlot> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IntentSlot");

  private static final org.apache.thrift.protocol.TField INTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intent_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DICT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQUIRES_FIELD_DESC = new org.apache.thrift.protocol.TField("requires", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField("question", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("dict", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IntentSlotStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IntentSlotTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String intent_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dict_id; // optional
  public boolean requires; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createdate; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String updatedate; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String question; // optional
  public @org.apache.thrift.annotation.Nullable Dict dict; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTENT_ID((short)1, "intent_id"),
    NAME((short)2, "name"),
    DICT_ID((short)3, "dict_id"),
    REQUIRES((short)4, "requires"),
    ID((short)5, "id"),
    CREATEDATE((short)6, "createdate"),
    UPDATEDATE((short)7, "updatedate"),
    QUESTION((short)8, "question"),
    DICT((short)9, "dict");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTENT_ID
          return INTENT_ID;
        case 2: // NAME
          return NAME;
        case 3: // DICT_ID
          return DICT_ID;
        case 4: // REQUIRES
          return REQUIRES;
        case 5: // ID
          return ID;
        case 6: // CREATEDATE
          return CREATEDATE;
        case 7: // UPDATEDATE
          return UPDATEDATE;
        case 8: // QUESTION
          return QUESTION;
        case 9: // DICT
          return DICT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUIRES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INTENT_ID,_Fields.NAME,_Fields.DICT_ID,_Fields.REQUIRES,_Fields.ID,_Fields.CREATEDATE,_Fields.UPDATEDATE,_Fields.QUESTION,_Fields.DICT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("intent_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT_ID, new org.apache.thrift.meta_data.FieldMetaData("dict_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRES, new org.apache.thrift.meta_data.FieldMetaData("requires", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATEDATE, new org.apache.thrift.meta_data.FieldMetaData("updatedate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.QUESTION, new org.apache.thrift.meta_data.FieldMetaData("question", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT, new org.apache.thrift.meta_data.FieldMetaData("dict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dict.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IntentSlot.class, metaDataMap);
  }

  public IntentSlot() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IntentSlot(IntentSlot other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIntent_id()) {
      this.intent_id = other.intent_id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDict_id()) {
      this.dict_id = other.dict_id;
    }
    this.requires = other.requires;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetUpdatedate()) {
      this.updatedate = other.updatedate;
    }
    if (other.isSetQuestion()) {
      this.question = other.question;
    }
    if (other.isSetDict()) {
      this.dict = new Dict(other.dict);
    }
  }

  public IntentSlot deepCopy() {
    return new IntentSlot(this);
  }

  @Override
  public void clear() {
    this.intent_id = null;
    this.name = null;
    this.dict_id = null;
    setRequiresIsSet(false);
    this.requires = false;
    this.id = null;
    this.createdate = null;
    this.updatedate = null;
    this.question = null;
    this.dict = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIntent_id() {
    return this.intent_id;
  }

  public IntentSlot setIntent_id(@org.apache.thrift.annotation.Nullable java.lang.String intent_id) {
    this.intent_id = intent_id;
    return this;
  }

  public void unsetIntent_id() {
    this.intent_id = null;
  }

  /** Returns true if field intent_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIntent_id() {
    return this.intent_id != null;
  }

  public void setIntent_idIsSet(boolean value) {
    if (!value) {
      this.intent_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public IntentSlot setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDict_id() {
    return this.dict_id;
  }

  public IntentSlot setDict_id(@org.apache.thrift.annotation.Nullable java.lang.String dict_id) {
    this.dict_id = dict_id;
    return this;
  }

  public void unsetDict_id() {
    this.dict_id = null;
  }

  /** Returns true if field dict_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_id() {
    return this.dict_id != null;
  }

  public void setDict_idIsSet(boolean value) {
    if (!value) {
      this.dict_id = null;
    }
  }

  public boolean isRequires() {
    return this.requires;
  }

  public IntentSlot setRequires(boolean requires) {
    this.requires = requires;
    setRequiresIsSet(true);
    return this;
  }

  public void unsetRequires() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUIRES_ISSET_ID);
  }

  /** Returns true if field requires is set (has been assigned a value) and false otherwise */
  public boolean isSetRequires() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUIRES_ISSET_ID);
  }

  public void setRequiresIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUIRES_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public IntentSlot setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedate() {
    return this.createdate;
  }

  public IntentSlot setCreatedate(@org.apache.thrift.annotation.Nullable java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdatedate() {
    return this.updatedate;
  }

  public IntentSlot setUpdatedate(@org.apache.thrift.annotation.Nullable java.lang.String updatedate) {
    this.updatedate = updatedate;
    return this;
  }

  public void unsetUpdatedate() {
    this.updatedate = null;
  }

  /** Returns true if field updatedate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedate() {
    return this.updatedate != null;
  }

  public void setUpdatedateIsSet(boolean value) {
    if (!value) {
      this.updatedate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuestion() {
    return this.question;
  }

  public IntentSlot setQuestion(@org.apache.thrift.annotation.Nullable java.lang.String question) {
    this.question = question;
    return this;
  }

  public void unsetQuestion() {
    this.question = null;
  }

  /** Returns true if field question is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestion() {
    return this.question != null;
  }

  public void setQuestionIsSet(boolean value) {
    if (!value) {
      this.question = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Dict getDict() {
    return this.dict;
  }

  public IntentSlot setDict(@org.apache.thrift.annotation.Nullable Dict dict) {
    this.dict = dict;
    return this;
  }

  public void unsetDict() {
    this.dict = null;
  }

  /** Returns true if field dict is set (has been assigned a value) and false otherwise */
  public boolean isSetDict() {
    return this.dict != null;
  }

  public void setDictIsSet(boolean value) {
    if (!value) {
      this.dict = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INTENT_ID:
      if (value == null) {
        unsetIntent_id();
      } else {
        setIntent_id((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DICT_ID:
      if (value == null) {
        unsetDict_id();
      } else {
        setDict_id((java.lang.String)value);
      }
      break;

    case REQUIRES:
      if (value == null) {
        unsetRequires();
      } else {
        setRequires((java.lang.Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((java.lang.String)value);
      }
      break;

    case UPDATEDATE:
      if (value == null) {
        unsetUpdatedate();
      } else {
        setUpdatedate((java.lang.String)value);
      }
      break;

    case QUESTION:
      if (value == null) {
        unsetQuestion();
      } else {
        setQuestion((java.lang.String)value);
      }
      break;

    case DICT:
      if (value == null) {
        unsetDict();
      } else {
        setDict((Dict)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTENT_ID:
      return getIntent_id();

    case NAME:
      return getName();

    case DICT_ID:
      return getDict_id();

    case REQUIRES:
      return isRequires();

    case ID:
      return getId();

    case CREATEDATE:
      return getCreatedate();

    case UPDATEDATE:
      return getUpdatedate();

    case QUESTION:
      return getQuestion();

    case DICT:
      return getDict();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTENT_ID:
      return isSetIntent_id();
    case NAME:
      return isSetName();
    case DICT_ID:
      return isSetDict_id();
    case REQUIRES:
      return isSetRequires();
    case ID:
      return isSetId();
    case CREATEDATE:
      return isSetCreatedate();
    case UPDATEDATE:
      return isSetUpdatedate();
    case QUESTION:
      return isSetQuestion();
    case DICT:
      return isSetDict();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof IntentSlot)
      return this.equals((IntentSlot)that);
    return false;
  }

  public boolean equals(IntentSlot that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_intent_id = true && this.isSetIntent_id();
    boolean that_present_intent_id = true && that.isSetIntent_id();
    if (this_present_intent_id || that_present_intent_id) {
      if (!(this_present_intent_id && that_present_intent_id))
        return false;
      if (!this.intent_id.equals(that.intent_id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_dict_id = true && this.isSetDict_id();
    boolean that_present_dict_id = true && that.isSetDict_id();
    if (this_present_dict_id || that_present_dict_id) {
      if (!(this_present_dict_id && that_present_dict_id))
        return false;
      if (!this.dict_id.equals(that.dict_id))
        return false;
    }

    boolean this_present_requires = true && this.isSetRequires();
    boolean that_present_requires = true && that.isSetRequires();
    if (this_present_requires || that_present_requires) {
      if (!(this_present_requires && that_present_requires))
        return false;
      if (this.requires != that.requires)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_updatedate = true && this.isSetUpdatedate();
    boolean that_present_updatedate = true && that.isSetUpdatedate();
    if (this_present_updatedate || that_present_updatedate) {
      if (!(this_present_updatedate && that_present_updatedate))
        return false;
      if (!this.updatedate.equals(that.updatedate))
        return false;
    }

    boolean this_present_question = true && this.isSetQuestion();
    boolean that_present_question = true && that.isSetQuestion();
    if (this_present_question || that_present_question) {
      if (!(this_present_question && that_present_question))
        return false;
      if (!this.question.equals(that.question))
        return false;
    }

    boolean this_present_dict = true && this.isSetDict();
    boolean that_present_dict = true && that.isSetDict();
    if (this_present_dict || that_present_dict) {
      if (!(this_present_dict && that_present_dict))
        return false;
      if (!this.dict.equals(that.dict))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIntent_id()) ? 131071 : 524287);
    if (isSetIntent_id())
      hashCode = hashCode * 8191 + intent_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict_id()) ? 131071 : 524287);
    if (isSetDict_id())
      hashCode = hashCode * 8191 + dict_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequires()) ? 131071 : 524287);
    if (isSetRequires())
      hashCode = hashCode * 8191 + ((requires) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedate()) ? 131071 : 524287);
    if (isSetCreatedate())
      hashCode = hashCode * 8191 + createdate.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatedate()) ? 131071 : 524287);
    if (isSetUpdatedate())
      hashCode = hashCode * 8191 + updatedate.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuestion()) ? 131071 : 524287);
    if (isSetQuestion())
      hashCode = hashCode * 8191 + question.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict()) ? 131071 : 524287);
    if (isSetDict())
      hashCode = hashCode * 8191 + dict.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(IntentSlot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIntent_id()).compareTo(other.isSetIntent_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntent_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intent_id, other.intent_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDict_id()).compareTo(other.isSetDict_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_id, other.dict_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequires()).compareTo(other.isSetRequires());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequires()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requires, other.requires);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedate()).compareTo(other.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, other.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedate()).compareTo(other.isSetUpdatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedate, other.updatedate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuestion()).compareTo(other.isSetQuestion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.question, other.question);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDict()).compareTo(other.isSetDict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict, other.dict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IntentSlot(");
    boolean first = true;

    if (isSetIntent_id()) {
      sb.append("intent_id:");
      if (this.intent_id == null) {
        sb.append("null");
      } else {
        sb.append(this.intent_id);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDict_id()) {
      if (!first) sb.append(", ");
      sb.append("dict_id:");
      if (this.dict_id == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_id);
      }
      first = false;
    }
    if (isSetRequires()) {
      if (!first) sb.append(", ");
      sb.append("requires:");
      sb.append(this.requires);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetCreatedate()) {
      if (!first) sb.append(", ");
      sb.append("createdate:");
      if (this.createdate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdate);
      }
      first = false;
    }
    if (isSetUpdatedate()) {
      if (!first) sb.append(", ");
      sb.append("updatedate:");
      if (this.updatedate == null) {
        sb.append("null");
      } else {
        sb.append(this.updatedate);
      }
      first = false;
    }
    if (isSetQuestion()) {
      if (!first) sb.append(", ");
      sb.append("question:");
      if (this.question == null) {
        sb.append("null");
      } else {
        sb.append(this.question);
      }
      first = false;
    }
    if (isSetDict()) {
      if (!first) sb.append(", ");
      sb.append("dict:");
      if (this.dict == null) {
        sb.append("null");
      } else {
        sb.append(this.dict);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dict != null) {
      dict.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntentSlotStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IntentSlotStandardScheme getScheme() {
      return new IntentSlotStandardScheme();
    }
  }

  private static class IntentSlotStandardScheme extends org.apache.thrift.scheme.StandardScheme<IntentSlot> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IntentSlot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intent_id = iprot.readString();
              struct.setIntent_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DICT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dict_id = iprot.readString();
              struct.setDict_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUIRES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requires = iprot.readBool();
              struct.setRequiresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedate = iprot.readString();
              struct.setUpdatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUESTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.question = iprot.readString();
              struct.setQuestionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dict = new Dict();
              struct.dict.read(iprot);
              struct.setDictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IntentSlot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.intent_id != null) {
        if (struct.isSetIntent_id()) {
          oprot.writeFieldBegin(INTENT_ID_FIELD_DESC);
          oprot.writeString(struct.intent_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict_id != null) {
        if (struct.isSetDict_id()) {
          oprot.writeFieldBegin(DICT_ID_FIELD_DESC);
          oprot.writeString(struct.dict_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequires()) {
        oprot.writeFieldBegin(REQUIRES_FIELD_DESC);
        oprot.writeBool(struct.requires);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdate != null) {
        if (struct.isSetCreatedate()) {
          oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
          oprot.writeString(struct.createdate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updatedate != null) {
        if (struct.isSetUpdatedate()) {
          oprot.writeFieldBegin(UPDATEDATE_FIELD_DESC);
          oprot.writeString(struct.updatedate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.question != null) {
        if (struct.isSetQuestion()) {
          oprot.writeFieldBegin(QUESTION_FIELD_DESC);
          oprot.writeString(struct.question);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict != null) {
        if (struct.isSetDict()) {
          oprot.writeFieldBegin(DICT_FIELD_DESC);
          struct.dict.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntentSlotTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IntentSlotTupleScheme getScheme() {
      return new IntentSlotTupleScheme();
    }
  }

  private static class IntentSlotTupleScheme extends org.apache.thrift.scheme.TupleScheme<IntentSlot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IntentSlot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIntent_id()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDict_id()) {
        optionals.set(2);
      }
      if (struct.isSetRequires()) {
        optionals.set(3);
      }
      if (struct.isSetId()) {
        optionals.set(4);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(5);
      }
      if (struct.isSetUpdatedate()) {
        optionals.set(6);
      }
      if (struct.isSetQuestion()) {
        optionals.set(7);
      }
      if (struct.isSetDict()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetIntent_id()) {
        oprot.writeString(struct.intent_id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDict_id()) {
        oprot.writeString(struct.dict_id);
      }
      if (struct.isSetRequires()) {
        oprot.writeBool(struct.requires);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetUpdatedate()) {
        oprot.writeString(struct.updatedate);
      }
      if (struct.isSetQuestion()) {
        oprot.writeString(struct.question);
      }
      if (struct.isSetDict()) {
        struct.dict.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IntentSlot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.intent_id = iprot.readString();
        struct.setIntent_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dict_id = iprot.readString();
        struct.setDict_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.requires = iprot.readBool();
        struct.setRequiresIsSet(true);
      }
      if (incoming.get(4)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updatedate = iprot.readString();
        struct.setUpdatedateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.question = iprot.readString();
        struct.setQuestionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dict = new Dict();
        struct.dict.read(iprot);
        struct.setDictIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

