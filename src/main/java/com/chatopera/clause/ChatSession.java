/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 聊天会话
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-16")
public class ChatSession implements org.apache.thrift.TBase<ChatSession, ChatSession._Fields>, java.io.Serializable, Cloneable, Comparable<ChatSession> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatSession");

  private static final org.apache.thrift.protocol.TField INTENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("intent_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHATBOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatbotID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESOLVED_FIELD_DESC = new org.apache.thrift.protocol.TField("resolved", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("branch", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedate", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatSessionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatSessionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String intent_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String chatbotID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String uid; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String channel; // optional
  public boolean resolved; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Entity> entities; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String branch; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createdate; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String updatedate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTENT_NAME((short)1, "intent_name"),
    CHATBOT_ID((short)2, "chatbotID"),
    UID((short)3, "uid"),
    CHANNEL((short)4, "channel"),
    RESOLVED((short)5, "resolved"),
    ID((short)6, "id"),
    ENTITIES((short)7, "entities"),
    BRANCH((short)8, "branch"),
    CREATEDATE((short)9, "createdate"),
    UPDATEDATE((short)10, "updatedate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTENT_NAME
          return INTENT_NAME;
        case 2: // CHATBOT_ID
          return CHATBOT_ID;
        case 3: // UID
          return UID;
        case 4: // CHANNEL
          return CHANNEL;
        case 5: // RESOLVED
          return RESOLVED;
        case 6: // ID
          return ID;
        case 7: // ENTITIES
          return ENTITIES;
        case 8: // BRANCH
          return BRANCH;
        case 9: // CREATEDATE
          return CREATEDATE;
        case 10: // UPDATEDATE
          return UPDATEDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOLVED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INTENT_NAME,_Fields.CHATBOT_ID,_Fields.UID,_Fields.CHANNEL,_Fields.RESOLVED,_Fields.ID,_Fields.ENTITIES,_Fields.BRANCH,_Fields.CREATEDATE,_Fields.UPDATEDATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("intent_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHATBOT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatbotID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOLVED, new org.apache.thrift.meta_data.FieldMetaData("resolved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entity.class))));
    tmpMap.put(_Fields.BRANCH, new org.apache.thrift.meta_data.FieldMetaData("branch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATEDATE, new org.apache.thrift.meta_data.FieldMetaData("updatedate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatSession.class, metaDataMap);
  }

  public ChatSession() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatSession(ChatSession other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIntent_name()) {
      this.intent_name = other.intent_name;
    }
    if (other.isSetChatbotID()) {
      this.chatbotID = other.chatbotID;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    this.resolved = other.resolved;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetEntities()) {
      java.util.List<Entity> __this__entities = new java.util.ArrayList<Entity>(other.entities.size());
      for (Entity other_element : other.entities) {
        __this__entities.add(new Entity(other_element));
      }
      this.entities = __this__entities;
    }
    if (other.isSetBranch()) {
      this.branch = other.branch;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetUpdatedate()) {
      this.updatedate = other.updatedate;
    }
  }

  public ChatSession deepCopy() {
    return new ChatSession(this);
  }

  @Override
  public void clear() {
    this.intent_name = null;
    this.chatbotID = null;
    this.uid = null;
    this.channel = null;
    setResolvedIsSet(false);
    this.resolved = false;
    this.id = null;
    this.entities = null;
    this.branch = null;
    this.createdate = null;
    this.updatedate = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIntent_name() {
    return this.intent_name;
  }

  public ChatSession setIntent_name(@org.apache.thrift.annotation.Nullable java.lang.String intent_name) {
    this.intent_name = intent_name;
    return this;
  }

  public void unsetIntent_name() {
    this.intent_name = null;
  }

  /** Returns true if field intent_name is set (has been assigned a value) and false otherwise */
  public boolean isSetIntent_name() {
    return this.intent_name != null;
  }

  public void setIntent_nameIsSet(boolean value) {
    if (!value) {
      this.intent_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatbotID() {
    return this.chatbotID;
  }

  public ChatSession setChatbotID(@org.apache.thrift.annotation.Nullable java.lang.String chatbotID) {
    this.chatbotID = chatbotID;
    return this;
  }

  public void unsetChatbotID() {
    this.chatbotID = null;
  }

  /** Returns true if field chatbotID is set (has been assigned a value) and false otherwise */
  public boolean isSetChatbotID() {
    return this.chatbotID != null;
  }

  public void setChatbotIDIsSet(boolean value) {
    if (!value) {
      this.chatbotID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUid() {
    return this.uid;
  }

  public ChatSession setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChannel() {
    return this.channel;
  }

  public ChatSession setChannel(@org.apache.thrift.annotation.Nullable java.lang.String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public boolean isResolved() {
    return this.resolved;
  }

  public ChatSession setResolved(boolean resolved) {
    this.resolved = resolved;
    setResolvedIsSet(true);
    return this;
  }

  public void unsetResolved() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESOLVED_ISSET_ID);
  }

  /** Returns true if field resolved is set (has been assigned a value) and false otherwise */
  public boolean isSetResolved() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESOLVED_ISSET_ID);
  }

  public void setResolvedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESOLVED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public ChatSession setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getEntitiesSize() {
    return (this.entities == null) ? 0 : this.entities.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Entity> getEntitiesIterator() {
    return (this.entities == null) ? null : this.entities.iterator();
  }

  public void addToEntities(Entity elem) {
    if (this.entities == null) {
      this.entities = new java.util.ArrayList<Entity>();
    }
    this.entities.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Entity> getEntities() {
    return this.entities;
  }

  public ChatSession setEntities(@org.apache.thrift.annotation.Nullable java.util.List<Entity> entities) {
    this.entities = entities;
    return this;
  }

  public void unsetEntities() {
    this.entities = null;
  }

  /** Returns true if field entities is set (has been assigned a value) and false otherwise */
  public boolean isSetEntities() {
    return this.entities != null;
  }

  public void setEntitiesIsSet(boolean value) {
    if (!value) {
      this.entities = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBranch() {
    return this.branch;
  }

  public ChatSession setBranch(@org.apache.thrift.annotation.Nullable java.lang.String branch) {
    this.branch = branch;
    return this;
  }

  public void unsetBranch() {
    this.branch = null;
  }

  /** Returns true if field branch is set (has been assigned a value) and false otherwise */
  public boolean isSetBranch() {
    return this.branch != null;
  }

  public void setBranchIsSet(boolean value) {
    if (!value) {
      this.branch = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedate() {
    return this.createdate;
  }

  public ChatSession setCreatedate(@org.apache.thrift.annotation.Nullable java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdatedate() {
    return this.updatedate;
  }

  public ChatSession setUpdatedate(@org.apache.thrift.annotation.Nullable java.lang.String updatedate) {
    this.updatedate = updatedate;
    return this;
  }

  public void unsetUpdatedate() {
    this.updatedate = null;
  }

  /** Returns true if field updatedate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedate() {
    return this.updatedate != null;
  }

  public void setUpdatedateIsSet(boolean value) {
    if (!value) {
      this.updatedate = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INTENT_NAME:
      if (value == null) {
        unsetIntent_name();
      } else {
        setIntent_name((java.lang.String)value);
      }
      break;

    case CHATBOT_ID:
      if (value == null) {
        unsetChatbotID();
      } else {
        setChatbotID((java.lang.String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((java.lang.String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((java.lang.String)value);
      }
      break;

    case RESOLVED:
      if (value == null) {
        unsetResolved();
      } else {
        setResolved((java.lang.Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case ENTITIES:
      if (value == null) {
        unsetEntities();
      } else {
        setEntities((java.util.List<Entity>)value);
      }
      break;

    case BRANCH:
      if (value == null) {
        unsetBranch();
      } else {
        setBranch((java.lang.String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((java.lang.String)value);
      }
      break;

    case UPDATEDATE:
      if (value == null) {
        unsetUpdatedate();
      } else {
        setUpdatedate((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INTENT_NAME:
      return getIntent_name();

    case CHATBOT_ID:
      return getChatbotID();

    case UID:
      return getUid();

    case CHANNEL:
      return getChannel();

    case RESOLVED:
      return isResolved();

    case ID:
      return getId();

    case ENTITIES:
      return getEntities();

    case BRANCH:
      return getBranch();

    case CREATEDATE:
      return getCreatedate();

    case UPDATEDATE:
      return getUpdatedate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INTENT_NAME:
      return isSetIntent_name();
    case CHATBOT_ID:
      return isSetChatbotID();
    case UID:
      return isSetUid();
    case CHANNEL:
      return isSetChannel();
    case RESOLVED:
      return isSetResolved();
    case ID:
      return isSetId();
    case ENTITIES:
      return isSetEntities();
    case BRANCH:
      return isSetBranch();
    case CREATEDATE:
      return isSetCreatedate();
    case UPDATEDATE:
      return isSetUpdatedate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatSession)
      return this.equals((ChatSession)that);
    return false;
  }

  public boolean equals(ChatSession that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_intent_name = true && this.isSetIntent_name();
    boolean that_present_intent_name = true && that.isSetIntent_name();
    if (this_present_intent_name || that_present_intent_name) {
      if (!(this_present_intent_name && that_present_intent_name))
        return false;
      if (!this.intent_name.equals(that.intent_name))
        return false;
    }

    boolean this_present_chatbotID = true && this.isSetChatbotID();
    boolean that_present_chatbotID = true && that.isSetChatbotID();
    if (this_present_chatbotID || that_present_chatbotID) {
      if (!(this_present_chatbotID && that_present_chatbotID))
        return false;
      if (!this.chatbotID.equals(that.chatbotID))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_resolved = true && this.isSetResolved();
    boolean that_present_resolved = true && that.isSetResolved();
    if (this_present_resolved || that_present_resolved) {
      if (!(this_present_resolved && that_present_resolved))
        return false;
      if (this.resolved != that.resolved)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_entities = true && this.isSetEntities();
    boolean that_present_entities = true && that.isSetEntities();
    if (this_present_entities || that_present_entities) {
      if (!(this_present_entities && that_present_entities))
        return false;
      if (!this.entities.equals(that.entities))
        return false;
    }

    boolean this_present_branch = true && this.isSetBranch();
    boolean that_present_branch = true && that.isSetBranch();
    if (this_present_branch || that_present_branch) {
      if (!(this_present_branch && that_present_branch))
        return false;
      if (!this.branch.equals(that.branch))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_updatedate = true && this.isSetUpdatedate();
    boolean that_present_updatedate = true && that.isSetUpdatedate();
    if (this_present_updatedate || that_present_updatedate) {
      if (!(this_present_updatedate && that_present_updatedate))
        return false;
      if (!this.updatedate.equals(that.updatedate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIntent_name()) ? 131071 : 524287);
    if (isSetIntent_name())
      hashCode = hashCode * 8191 + intent_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatbotID()) ? 131071 : 524287);
    if (isSetChatbotID())
      hashCode = hashCode * 8191 + chatbotID.hashCode();

    hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
    if (isSetUid())
      hashCode = hashCode * 8191 + uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel()) ? 131071 : 524287);
    if (isSetChannel())
      hashCode = hashCode * 8191 + channel.hashCode();

    hashCode = hashCode * 8191 + ((isSetResolved()) ? 131071 : 524287);
    if (isSetResolved())
      hashCode = hashCode * 8191 + ((resolved) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntities()) ? 131071 : 524287);
    if (isSetEntities())
      hashCode = hashCode * 8191 + entities.hashCode();

    hashCode = hashCode * 8191 + ((isSetBranch()) ? 131071 : 524287);
    if (isSetBranch())
      hashCode = hashCode * 8191 + branch.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedate()) ? 131071 : 524287);
    if (isSetCreatedate())
      hashCode = hashCode * 8191 + createdate.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatedate()) ? 131071 : 524287);
    if (isSetUpdatedate())
      hashCode = hashCode * 8191 + updatedate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ChatSession other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIntent_name()).compareTo(other.isSetIntent_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntent_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intent_name, other.intent_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChatbotID()).compareTo(other.isSetChatbotID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatbotID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatbotID, other.chatbotID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResolved()).compareTo(other.isSetResolved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolved, other.resolved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBranch()).compareTo(other.isSetBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch, other.branch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedate()).compareTo(other.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, other.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedate()).compareTo(other.isSetUpdatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedate, other.updatedate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChatSession(");
    boolean first = true;

    if (isSetIntent_name()) {
      sb.append("intent_name:");
      if (this.intent_name == null) {
        sb.append("null");
      } else {
        sb.append(this.intent_name);
      }
      first = false;
    }
    if (isSetChatbotID()) {
      if (!first) sb.append(", ");
      sb.append("chatbotID:");
      if (this.chatbotID == null) {
        sb.append("null");
      } else {
        sb.append(this.chatbotID);
      }
      first = false;
    }
    if (isSetUid()) {
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
    }
    if (isSetResolved()) {
      if (!first) sb.append(", ");
      sb.append("resolved:");
      sb.append(this.resolved);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetEntities()) {
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
    }
    if (isSetBranch()) {
      if (!first) sb.append(", ");
      sb.append("branch:");
      if (this.branch == null) {
        sb.append("null");
      } else {
        sb.append(this.branch);
      }
      first = false;
    }
    if (isSetCreatedate()) {
      if (!first) sb.append(", ");
      sb.append("createdate:");
      if (this.createdate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdate);
      }
      first = false;
    }
    if (isSetUpdatedate()) {
      if (!first) sb.append(", ");
      sb.append("updatedate:");
      if (this.updatedate == null) {
        sb.append("null");
      } else {
        sb.append(this.updatedate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatSessionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatSessionStandardScheme getScheme() {
      return new ChatSessionStandardScheme();
    }
  }

  private static class ChatSessionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChatSession> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatSession struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intent_name = iprot.readString();
              struct.setIntent_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHATBOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatbotID = iprot.readString();
              struct.setChatbotIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOLVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resolved = iprot.readBool();
              struct.setResolvedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.entities = new java.util.ArrayList<Entity>(_list16.size);
                @org.apache.thrift.annotation.Nullable Entity _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Entity();
                  _elem17.read(iprot);
                  struct.entities.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.branch = iprot.readString();
              struct.setBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedate = iprot.readString();
              struct.setUpdatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatSession struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.intent_name != null) {
        if (struct.isSetIntent_name()) {
          oprot.writeFieldBegin(INTENT_NAME_FIELD_DESC);
          oprot.writeString(struct.intent_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatbotID != null) {
        if (struct.isSetChatbotID()) {
          oprot.writeFieldBegin(CHATBOT_ID_FIELD_DESC);
          oprot.writeString(struct.chatbotID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uid != null) {
        if (struct.isSetUid()) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.channel != null) {
        if (struct.isSetChannel()) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          oprot.writeString(struct.channel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResolved()) {
        oprot.writeFieldBegin(RESOLVED_FIELD_DESC);
        oprot.writeBool(struct.resolved);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entities != null) {
        if (struct.isSetEntities()) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entities.size()));
            for (Entity _iter19 : struct.entities)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.branch != null) {
        if (struct.isSetBranch()) {
          oprot.writeFieldBegin(BRANCH_FIELD_DESC);
          oprot.writeString(struct.branch);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdate != null) {
        if (struct.isSetCreatedate()) {
          oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
          oprot.writeString(struct.createdate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updatedate != null) {
        if (struct.isSetUpdatedate()) {
          oprot.writeFieldBegin(UPDATEDATE_FIELD_DESC);
          oprot.writeString(struct.updatedate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatSessionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatSessionTupleScheme getScheme() {
      return new ChatSessionTupleScheme();
    }
  }

  private static class ChatSessionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChatSession> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatSession struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIntent_name()) {
        optionals.set(0);
      }
      if (struct.isSetChatbotID()) {
        optionals.set(1);
      }
      if (struct.isSetUid()) {
        optionals.set(2);
      }
      if (struct.isSetChannel()) {
        optionals.set(3);
      }
      if (struct.isSetResolved()) {
        optionals.set(4);
      }
      if (struct.isSetId()) {
        optionals.set(5);
      }
      if (struct.isSetEntities()) {
        optionals.set(6);
      }
      if (struct.isSetBranch()) {
        optionals.set(7);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(8);
      }
      if (struct.isSetUpdatedate()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetIntent_name()) {
        oprot.writeString(struct.intent_name);
      }
      if (struct.isSetChatbotID()) {
        oprot.writeString(struct.chatbotID);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetResolved()) {
        oprot.writeBool(struct.resolved);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetEntities()) {
        {
          oprot.writeI32(struct.entities.size());
          for (Entity _iter20 : struct.entities)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetBranch()) {
        oprot.writeString(struct.branch);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetUpdatedate()) {
        oprot.writeString(struct.updatedate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatSession struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.intent_name = iprot.readString();
        struct.setIntent_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chatbotID = iprot.readString();
        struct.setChatbotIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resolved = iprot.readBool();
        struct.setResolvedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entities = new java.util.ArrayList<Entity>(_list21.size);
          @org.apache.thrift.annotation.Nullable Entity _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Entity();
            _elem22.read(iprot);
            struct.entities.add(_elem22);
          }
        }
        struct.setEntitiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.branch = iprot.readString();
        struct.setBranchIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updatedate = iprot.readString();
        struct.setUpdatedateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

