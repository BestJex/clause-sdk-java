/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 词条
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-16")
public class DictWord implements org.apache.thrift.TBase<DictWord, DictWord._Fields>, java.io.Serializable, Cloneable, Comparable<DictWord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DictWord");

  private static final org.apache.thrift.protocol.TField WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("word", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DICT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SYNONYMS_FIELD_DESC = new org.apache.thrift.protocol.TField("synonyms", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedate", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DictWordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DictWordTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String word; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dict_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String synonyms; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tag; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String lang; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createdate; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String updatedate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORD((short)1, "word"),
    DICT_ID((short)2, "dict_id"),
    SYNONYMS((short)3, "synonyms"),
    TAG((short)4, "tag"),
    LANG((short)5, "lang"),
    CREATEDATE((short)6, "createdate"),
    UPDATEDATE((short)7, "updatedate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORD
          return WORD;
        case 2: // DICT_ID
          return DICT_ID;
        case 3: // SYNONYMS
          return SYNONYMS;
        case 4: // TAG
          return TAG;
        case 5: // LANG
          return LANG;
        case 6: // CREATEDATE
          return CREATEDATE;
        case 7: // UPDATEDATE
          return UPDATEDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.WORD,_Fields.DICT_ID,_Fields.SYNONYMS,_Fields.TAG,_Fields.LANG,_Fields.CREATEDATE,_Fields.UPDATEDATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORD, new org.apache.thrift.meta_data.FieldMetaData("word", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT_ID, new org.apache.thrift.meta_data.FieldMetaData("dict_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYNONYMS, new org.apache.thrift.meta_data.FieldMetaData("synonyms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.UPDATEDATE, new org.apache.thrift.meta_data.FieldMetaData("updatedate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DictWord.class, metaDataMap);
  }

  public DictWord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DictWord(DictWord other) {
    if (other.isSetWord()) {
      this.word = other.word;
    }
    if (other.isSetDict_id()) {
      this.dict_id = other.dict_id;
    }
    if (other.isSetSynonyms()) {
      this.synonyms = other.synonyms;
    }
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetUpdatedate()) {
      this.updatedate = other.updatedate;
    }
  }

  public DictWord deepCopy() {
    return new DictWord(this);
  }

  @Override
  public void clear() {
    this.word = null;
    this.dict_id = null;
    this.synonyms = null;
    this.tag = null;
    this.lang = null;
    this.createdate = null;
    this.updatedate = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWord() {
    return this.word;
  }

  public DictWord setWord(@org.apache.thrift.annotation.Nullable java.lang.String word) {
    this.word = word;
    return this;
  }

  public void unsetWord() {
    this.word = null;
  }

  /** Returns true if field word is set (has been assigned a value) and false otherwise */
  public boolean isSetWord() {
    return this.word != null;
  }

  public void setWordIsSet(boolean value) {
    if (!value) {
      this.word = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDict_id() {
    return this.dict_id;
  }

  public DictWord setDict_id(@org.apache.thrift.annotation.Nullable java.lang.String dict_id) {
    this.dict_id = dict_id;
    return this;
  }

  public void unsetDict_id() {
    this.dict_id = null;
  }

  /** Returns true if field dict_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_id() {
    return this.dict_id != null;
  }

  public void setDict_idIsSet(boolean value) {
    if (!value) {
      this.dict_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSynonyms() {
    return this.synonyms;
  }

  public DictWord setSynonyms(@org.apache.thrift.annotation.Nullable java.lang.String synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public void unsetSynonyms() {
    this.synonyms = null;
  }

  /** Returns true if field synonyms is set (has been assigned a value) and false otherwise */
  public boolean isSetSynonyms() {
    return this.synonyms != null;
  }

  public void setSynonymsIsSet(boolean value) {
    if (!value) {
      this.synonyms = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTag() {
    return this.tag;
  }

  public DictWord setTag(@org.apache.thrift.annotation.Nullable java.lang.String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLang() {
    return this.lang;
  }

  public DictWord setLang(@org.apache.thrift.annotation.Nullable java.lang.String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedate() {
    return this.createdate;
  }

  public DictWord setCreatedate(@org.apache.thrift.annotation.Nullable java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdatedate() {
    return this.updatedate;
  }

  public DictWord setUpdatedate(@org.apache.thrift.annotation.Nullable java.lang.String updatedate) {
    this.updatedate = updatedate;
    return this;
  }

  public void unsetUpdatedate() {
    this.updatedate = null;
  }

  /** Returns true if field updatedate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedate() {
    return this.updatedate != null;
  }

  public void setUpdatedateIsSet(boolean value) {
    if (!value) {
      this.updatedate = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case WORD:
      if (value == null) {
        unsetWord();
      } else {
        setWord((java.lang.String)value);
      }
      break;

    case DICT_ID:
      if (value == null) {
        unsetDict_id();
      } else {
        setDict_id((java.lang.String)value);
      }
      break;

    case SYNONYMS:
      if (value == null) {
        unsetSynonyms();
      } else {
        setSynonyms((java.lang.String)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((java.lang.String)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((java.lang.String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((java.lang.String)value);
      }
      break;

    case UPDATEDATE:
      if (value == null) {
        unsetUpdatedate();
      } else {
        setUpdatedate((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WORD:
      return getWord();

    case DICT_ID:
      return getDict_id();

    case SYNONYMS:
      return getSynonyms();

    case TAG:
      return getTag();

    case LANG:
      return getLang();

    case CREATEDATE:
      return getCreatedate();

    case UPDATEDATE:
      return getUpdatedate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WORD:
      return isSetWord();
    case DICT_ID:
      return isSetDict_id();
    case SYNONYMS:
      return isSetSynonyms();
    case TAG:
      return isSetTag();
    case LANG:
      return isSetLang();
    case CREATEDATE:
      return isSetCreatedate();
    case UPDATEDATE:
      return isSetUpdatedate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DictWord)
      return this.equals((DictWord)that);
    return false;
  }

  public boolean equals(DictWord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_word = true && this.isSetWord();
    boolean that_present_word = true && that.isSetWord();
    if (this_present_word || that_present_word) {
      if (!(this_present_word && that_present_word))
        return false;
      if (!this.word.equals(that.word))
        return false;
    }

    boolean this_present_dict_id = true && this.isSetDict_id();
    boolean that_present_dict_id = true && that.isSetDict_id();
    if (this_present_dict_id || that_present_dict_id) {
      if (!(this_present_dict_id && that_present_dict_id))
        return false;
      if (!this.dict_id.equals(that.dict_id))
        return false;
    }

    boolean this_present_synonyms = true && this.isSetSynonyms();
    boolean that_present_synonyms = true && that.isSetSynonyms();
    if (this_present_synonyms || that_present_synonyms) {
      if (!(this_present_synonyms && that_present_synonyms))
        return false;
      if (!this.synonyms.equals(that.synonyms))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_updatedate = true && this.isSetUpdatedate();
    boolean that_present_updatedate = true && that.isSetUpdatedate();
    if (this_present_updatedate || that_present_updatedate) {
      if (!(this_present_updatedate && that_present_updatedate))
        return false;
      if (!this.updatedate.equals(that.updatedate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWord()) ? 131071 : 524287);
    if (isSetWord())
      hashCode = hashCode * 8191 + word.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict_id()) ? 131071 : 524287);
    if (isSetDict_id())
      hashCode = hashCode * 8191 + dict_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetSynonyms()) ? 131071 : 524287);
    if (isSetSynonyms())
      hashCode = hashCode * 8191 + synonyms.hashCode();

    hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
    if (isSetTag())
      hashCode = hashCode * 8191 + tag.hashCode();

    hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
    if (isSetLang())
      hashCode = hashCode * 8191 + lang.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedate()) ? 131071 : 524287);
    if (isSetCreatedate())
      hashCode = hashCode * 8191 + createdate.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdatedate()) ? 131071 : 524287);
    if (isSetUpdatedate())
      hashCode = hashCode * 8191 + updatedate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DictWord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWord()).compareTo(other.isSetWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word, other.word);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDict_id()).compareTo(other.isSetDict_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_id, other.dict_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSynonyms()).compareTo(other.isSetSynonyms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSynonyms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.synonyms, other.synonyms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedate()).compareTo(other.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, other.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedate()).compareTo(other.isSetUpdatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedate, other.updatedate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DictWord(");
    boolean first = true;

    if (isSetWord()) {
      sb.append("word:");
      if (this.word == null) {
        sb.append("null");
      } else {
        sb.append(this.word);
      }
      first = false;
    }
    if (isSetDict_id()) {
      if (!first) sb.append(", ");
      sb.append("dict_id:");
      if (this.dict_id == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_id);
      }
      first = false;
    }
    if (isSetSynonyms()) {
      if (!first) sb.append(", ");
      sb.append("synonyms:");
      if (this.synonyms == null) {
        sb.append("null");
      } else {
        sb.append(this.synonyms);
      }
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    if (isSetCreatedate()) {
      if (!first) sb.append(", ");
      sb.append("createdate:");
      if (this.createdate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdate);
      }
      first = false;
    }
    if (isSetUpdatedate()) {
      if (!first) sb.append(", ");
      sb.append("updatedate:");
      if (this.updatedate == null) {
        sb.append("null");
      } else {
        sb.append(this.updatedate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DictWordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DictWordStandardScheme getScheme() {
      return new DictWordStandardScheme();
    }
  }

  private static class DictWordStandardScheme extends org.apache.thrift.scheme.StandardScheme<DictWord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DictWord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.word = iprot.readString();
              struct.setWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DICT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dict_id = iprot.readString();
              struct.setDict_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYNONYMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.synonyms = iprot.readString();
              struct.setSynonymsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedate = iprot.readString();
              struct.setUpdatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DictWord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.word != null) {
        if (struct.isSetWord()) {
          oprot.writeFieldBegin(WORD_FIELD_DESC);
          oprot.writeString(struct.word);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict_id != null) {
        if (struct.isSetDict_id()) {
          oprot.writeFieldBegin(DICT_ID_FIELD_DESC);
          oprot.writeString(struct.dict_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.synonyms != null) {
        if (struct.isSetSynonyms()) {
          oprot.writeFieldBegin(SYNONYMS_FIELD_DESC);
          oprot.writeString(struct.synonyms);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdate != null) {
        if (struct.isSetCreatedate()) {
          oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
          oprot.writeString(struct.createdate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updatedate != null) {
        if (struct.isSetUpdatedate()) {
          oprot.writeFieldBegin(UPDATEDATE_FIELD_DESC);
          oprot.writeString(struct.updatedate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DictWordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DictWordTupleScheme getScheme() {
      return new DictWordTupleScheme();
    }
  }

  private static class DictWordTupleScheme extends org.apache.thrift.scheme.TupleScheme<DictWord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DictWord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWord()) {
        optionals.set(0);
      }
      if (struct.isSetDict_id()) {
        optionals.set(1);
      }
      if (struct.isSetSynonyms()) {
        optionals.set(2);
      }
      if (struct.isSetTag()) {
        optionals.set(3);
      }
      if (struct.isSetLang()) {
        optionals.set(4);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(5);
      }
      if (struct.isSetUpdatedate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetWord()) {
        oprot.writeString(struct.word);
      }
      if (struct.isSetDict_id()) {
        oprot.writeString(struct.dict_id);
      }
      if (struct.isSetSynonyms()) {
        oprot.writeString(struct.synonyms);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetUpdatedate()) {
        oprot.writeString(struct.updatedate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DictWord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.word = iprot.readString();
        struct.setWordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dict_id = iprot.readString();
        struct.setDict_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.synonyms = iprot.readString();
        struct.setSynonymsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updatedate = iprot.readString();
        struct.setUpdatedateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

