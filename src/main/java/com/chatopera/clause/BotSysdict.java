/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 引用系统词典关联
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-07")
public class BotSysdict implements org.apache.thrift.TBase<BotSysdict, BotSysdict._Fields>, java.io.Serializable, Cloneable, Comparable<BotSysdict> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BotSysdict");

  private static final org.apache.thrift.protocol.TField CHATBOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatbotID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DICT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dict_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BotSysdictStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BotSysdictTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String chatbotID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dict_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createdate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHATBOT_ID((short)1, "chatbotID"),
    DICT_ID((short)2, "dict_id"),
    ID((short)3, "id"),
    CREATEDATE((short)4, "createdate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHATBOT_ID
          return CHATBOT_ID;
        case 2: // DICT_ID
          return DICT_ID;
        case 3: // ID
          return ID;
        case 4: // CREATEDATE
          return CREATEDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CHATBOT_ID,_Fields.DICT_ID,_Fields.ID,_Fields.CREATEDATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHATBOT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatbotID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DICT_ID, new org.apache.thrift.meta_data.FieldMetaData("dict_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BotSysdict.class, metaDataMap);
  }

  public BotSysdict() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BotSysdict(BotSysdict other) {
    if (other.isSetChatbotID()) {
      this.chatbotID = other.chatbotID;
    }
    if (other.isSetDict_id()) {
      this.dict_id = other.dict_id;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
  }

  public BotSysdict deepCopy() {
    return new BotSysdict(this);
  }

  @Override
  public void clear() {
    this.chatbotID = null;
    this.dict_id = null;
    this.id = null;
    this.createdate = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatbotID() {
    return this.chatbotID;
  }

  public BotSysdict setChatbotID(@org.apache.thrift.annotation.Nullable java.lang.String chatbotID) {
    this.chatbotID = chatbotID;
    return this;
  }

  public void unsetChatbotID() {
    this.chatbotID = null;
  }

  /** Returns true if field chatbotID is set (has been assigned a value) and false otherwise */
  public boolean isSetChatbotID() {
    return this.chatbotID != null;
  }

  public void setChatbotIDIsSet(boolean value) {
    if (!value) {
      this.chatbotID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDict_id() {
    return this.dict_id;
  }

  public BotSysdict setDict_id(@org.apache.thrift.annotation.Nullable java.lang.String dict_id) {
    this.dict_id = dict_id;
    return this;
  }

  public void unsetDict_id() {
    this.dict_id = null;
  }

  /** Returns true if field dict_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDict_id() {
    return this.dict_id != null;
  }

  public void setDict_idIsSet(boolean value) {
    if (!value) {
      this.dict_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public BotSysdict setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedate() {
    return this.createdate;
  }

  public BotSysdict setCreatedate(@org.apache.thrift.annotation.Nullable java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHATBOT_ID:
      if (value == null) {
        unsetChatbotID();
      } else {
        setChatbotID((java.lang.String)value);
      }
      break;

    case DICT_ID:
      if (value == null) {
        unsetDict_id();
      } else {
        setDict_id((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHATBOT_ID:
      return getChatbotID();

    case DICT_ID:
      return getDict_id();

    case ID:
      return getId();

    case CREATEDATE:
      return getCreatedate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHATBOT_ID:
      return isSetChatbotID();
    case DICT_ID:
      return isSetDict_id();
    case ID:
      return isSetId();
    case CREATEDATE:
      return isSetCreatedate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BotSysdict)
      return this.equals((BotSysdict)that);
    return false;
  }

  public boolean equals(BotSysdict that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chatbotID = true && this.isSetChatbotID();
    boolean that_present_chatbotID = true && that.isSetChatbotID();
    if (this_present_chatbotID || that_present_chatbotID) {
      if (!(this_present_chatbotID && that_present_chatbotID))
        return false;
      if (!this.chatbotID.equals(that.chatbotID))
        return false;
    }

    boolean this_present_dict_id = true && this.isSetDict_id();
    boolean that_present_dict_id = true && that.isSetDict_id();
    if (this_present_dict_id || that_present_dict_id) {
      if (!(this_present_dict_id && that_present_dict_id))
        return false;
      if (!this.dict_id.equals(that.dict_id))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChatbotID()) ? 131071 : 524287);
    if (isSetChatbotID())
      hashCode = hashCode * 8191 + chatbotID.hashCode();

    hashCode = hashCode * 8191 + ((isSetDict_id()) ? 131071 : 524287);
    if (isSetDict_id())
      hashCode = hashCode * 8191 + dict_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedate()) ? 131071 : 524287);
    if (isSetCreatedate())
      hashCode = hashCode * 8191 + createdate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BotSysdict other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChatbotID()).compareTo(other.isSetChatbotID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatbotID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatbotID, other.chatbotID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDict_id()).compareTo(other.isSetDict_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDict_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dict_id, other.dict_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedate()).compareTo(other.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, other.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BotSysdict(");
    boolean first = true;

    if (isSetChatbotID()) {
      sb.append("chatbotID:");
      if (this.chatbotID == null) {
        sb.append("null");
      } else {
        sb.append(this.chatbotID);
      }
      first = false;
    }
    if (isSetDict_id()) {
      if (!first) sb.append(", ");
      sb.append("dict_id:");
      if (this.dict_id == null) {
        sb.append("null");
      } else {
        sb.append(this.dict_id);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetCreatedate()) {
      if (!first) sb.append(", ");
      sb.append("createdate:");
      if (this.createdate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BotSysdictStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BotSysdictStandardScheme getScheme() {
      return new BotSysdictStandardScheme();
    }
  }

  private static class BotSysdictStandardScheme extends org.apache.thrift.scheme.StandardScheme<BotSysdict> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BotSysdict struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHATBOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatbotID = iprot.readString();
              struct.setChatbotIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DICT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dict_id = iprot.readString();
              struct.setDict_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BotSysdict struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatbotID != null) {
        if (struct.isSetChatbotID()) {
          oprot.writeFieldBegin(CHATBOT_ID_FIELD_DESC);
          oprot.writeString(struct.chatbotID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dict_id != null) {
        if (struct.isSetDict_id()) {
          oprot.writeFieldBegin(DICT_ID_FIELD_DESC);
          oprot.writeString(struct.dict_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdate != null) {
        if (struct.isSetCreatedate()) {
          oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
          oprot.writeString(struct.createdate);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BotSysdictTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BotSysdictTupleScheme getScheme() {
      return new BotSysdictTupleScheme();
    }
  }

  private static class BotSysdictTupleScheme extends org.apache.thrift.scheme.TupleScheme<BotSysdict> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BotSysdict struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChatbotID()) {
        optionals.set(0);
      }
      if (struct.isSetDict_id()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChatbotID()) {
        oprot.writeString(struct.chatbotID);
      }
      if (struct.isSetDict_id()) {
        oprot.writeString(struct.dict_id);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BotSysdict struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.chatbotID = iprot.readString();
        struct.setChatbotIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dict_id = iprot.readString();
        struct.setDict_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

