/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 调试版本
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-07")
public class DevelopVersion implements org.apache.thrift.TBase<DevelopVersion, DevelopVersion._Fields>, java.io.Serializable, Cloneable, Comparable<DevelopVersion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DevelopVersion");

  private static final org.apache.thrift.protocol.TField CHATBOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatbotID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("published", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATED_FIELD_DESC = new org.apache.thrift.protocol.TField("operated", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DevelopVersionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DevelopVersionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String chatbotID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String version; // optional
  public boolean published; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createdate; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String operated; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHATBOT_ID((short)1, "chatbotID"),
    VERSION((short)2, "version"),
    PUBLISHED((short)3, "published"),
    ID((short)4, "id"),
    CREATEDATE((short)5, "createdate"),
    OPERATED((short)6, "operated");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHATBOT_ID
          return CHATBOT_ID;
        case 2: // VERSION
          return VERSION;
        case 3: // PUBLISHED
          return PUBLISHED;
        case 4: // ID
          return ID;
        case 5: // CREATEDATE
          return CREATEDATE;
        case 6: // OPERATED
          return OPERATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PUBLISHED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CHATBOT_ID,_Fields.VERSION,_Fields.PUBLISHED,_Fields.ID,_Fields.CREATEDATE,_Fields.OPERATED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHATBOT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatbotID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISHED, new org.apache.thrift.meta_data.FieldMetaData("published", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.OPERATED, new org.apache.thrift.meta_data.FieldMetaData("operated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DevelopVersion.class, metaDataMap);
  }

  public DevelopVersion() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DevelopVersion(DevelopVersion other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChatbotID()) {
      this.chatbotID = other.chatbotID;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.published = other.published;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetOperated()) {
      this.operated = other.operated;
    }
  }

  public DevelopVersion deepCopy() {
    return new DevelopVersion(this);
  }

  @Override
  public void clear() {
    this.chatbotID = null;
    this.version = null;
    setPublishedIsSet(false);
    this.published = false;
    this.id = null;
    this.createdate = null;
    this.operated = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatbotID() {
    return this.chatbotID;
  }

  public DevelopVersion setChatbotID(@org.apache.thrift.annotation.Nullable java.lang.String chatbotID) {
    this.chatbotID = chatbotID;
    return this;
  }

  public void unsetChatbotID() {
    this.chatbotID = null;
  }

  /** Returns true if field chatbotID is set (has been assigned a value) and false otherwise */
  public boolean isSetChatbotID() {
    return this.chatbotID != null;
  }

  public void setChatbotIDIsSet(boolean value) {
    if (!value) {
      this.chatbotID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.version;
  }

  public DevelopVersion setVersion(@org.apache.thrift.annotation.Nullable java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public boolean isPublished() {
    return this.published;
  }

  public DevelopVersion setPublished(boolean published) {
    this.published = published;
    setPublishedIsSet(true);
    return this;
  }

  public void unsetPublished() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBLISHED_ISSET_ID);
  }

  /** Returns true if field published is set (has been assigned a value) and false otherwise */
  public boolean isSetPublished() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBLISHED_ISSET_ID);
  }

  public void setPublishedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBLISHED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public DevelopVersion setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedate() {
    return this.createdate;
  }

  public DevelopVersion setCreatedate(@org.apache.thrift.annotation.Nullable java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOperated() {
    return this.operated;
  }

  public DevelopVersion setOperated(@org.apache.thrift.annotation.Nullable java.lang.String operated) {
    this.operated = operated;
    return this;
  }

  public void unsetOperated() {
    this.operated = null;
  }

  /** Returns true if field operated is set (has been assigned a value) and false otherwise */
  public boolean isSetOperated() {
    return this.operated != null;
  }

  public void setOperatedIsSet(boolean value) {
    if (!value) {
      this.operated = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHATBOT_ID:
      if (value == null) {
        unsetChatbotID();
      } else {
        setChatbotID((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case PUBLISHED:
      if (value == null) {
        unsetPublished();
      } else {
        setPublished((java.lang.Boolean)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((java.lang.String)value);
      }
      break;

    case OPERATED:
      if (value == null) {
        unsetOperated();
      } else {
        setOperated((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHATBOT_ID:
      return getChatbotID();

    case VERSION:
      return getVersion();

    case PUBLISHED:
      return isPublished();

    case ID:
      return getId();

    case CREATEDATE:
      return getCreatedate();

    case OPERATED:
      return getOperated();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHATBOT_ID:
      return isSetChatbotID();
    case VERSION:
      return isSetVersion();
    case PUBLISHED:
      return isSetPublished();
    case ID:
      return isSetId();
    case CREATEDATE:
      return isSetCreatedate();
    case OPERATED:
      return isSetOperated();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DevelopVersion)
      return this.equals((DevelopVersion)that);
    return false;
  }

  public boolean equals(DevelopVersion that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chatbotID = true && this.isSetChatbotID();
    boolean that_present_chatbotID = true && that.isSetChatbotID();
    if (this_present_chatbotID || that_present_chatbotID) {
      if (!(this_present_chatbotID && that_present_chatbotID))
        return false;
      if (!this.chatbotID.equals(that.chatbotID))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_published = true && this.isSetPublished();
    boolean that_present_published = true && that.isSetPublished();
    if (this_present_published || that_present_published) {
      if (!(this_present_published && that_present_published))
        return false;
      if (this.published != that.published)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_operated = true && this.isSetOperated();
    boolean that_present_operated = true && that.isSetOperated();
    if (this_present_operated || that_present_operated) {
      if (!(this_present_operated && that_present_operated))
        return false;
      if (!this.operated.equals(that.operated))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChatbotID()) ? 131071 : 524287);
    if (isSetChatbotID())
      hashCode = hashCode * 8191 + chatbotID.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublished()) ? 131071 : 524287);
    if (isSetPublished())
      hashCode = hashCode * 8191 + ((published) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedate()) ? 131071 : 524287);
    if (isSetCreatedate())
      hashCode = hashCode * 8191 + createdate.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperated()) ? 131071 : 524287);
    if (isSetOperated())
      hashCode = hashCode * 8191 + operated.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DevelopVersion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChatbotID()).compareTo(other.isSetChatbotID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatbotID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatbotID, other.chatbotID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublished()).compareTo(other.isSetPublished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.published, other.published);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedate()).compareTo(other.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, other.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOperated()).compareTo(other.isSetOperated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operated, other.operated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DevelopVersion(");
    boolean first = true;

    if (isSetChatbotID()) {
      sb.append("chatbotID:");
      if (this.chatbotID == null) {
        sb.append("null");
      } else {
        sb.append(this.chatbotID);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetPublished()) {
      if (!first) sb.append(", ");
      sb.append("published:");
      sb.append(this.published);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetCreatedate()) {
      if (!first) sb.append(", ");
      sb.append("createdate:");
      if (this.createdate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdate);
      }
      first = false;
    }
    if (isSetOperated()) {
      if (!first) sb.append(", ");
      sb.append("operated:");
      if (this.operated == null) {
        sb.append("null");
      } else {
        sb.append(this.operated);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DevelopVersionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DevelopVersionStandardScheme getScheme() {
      return new DevelopVersionStandardScheme();
    }
  }

  private static class DevelopVersionStandardScheme extends org.apache.thrift.scheme.StandardScheme<DevelopVersion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DevelopVersion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHATBOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatbotID = iprot.readString();
              struct.setChatbotIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.published = iprot.readBool();
              struct.setPublishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operated = iprot.readString();
              struct.setOperatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DevelopVersion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatbotID != null) {
        if (struct.isSetChatbotID()) {
          oprot.writeFieldBegin(CHATBOT_ID_FIELD_DESC);
          oprot.writeString(struct.chatbotID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPublished()) {
        oprot.writeFieldBegin(PUBLISHED_FIELD_DESC);
        oprot.writeBool(struct.published);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdate != null) {
        if (struct.isSetCreatedate()) {
          oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
          oprot.writeString(struct.createdate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operated != null) {
        if (struct.isSetOperated()) {
          oprot.writeFieldBegin(OPERATED_FIELD_DESC);
          oprot.writeString(struct.operated);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DevelopVersionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DevelopVersionTupleScheme getScheme() {
      return new DevelopVersionTupleScheme();
    }
  }

  private static class DevelopVersionTupleScheme extends org.apache.thrift.scheme.TupleScheme<DevelopVersion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DevelopVersion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChatbotID()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetPublished()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(4);
      }
      if (struct.isSetOperated()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetChatbotID()) {
        oprot.writeString(struct.chatbotID);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetPublished()) {
        oprot.writeBool(struct.published);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetOperated()) {
        oprot.writeString(struct.operated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DevelopVersion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.chatbotID = iprot.readString();
        struct.setChatbotIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.published = iprot.readBool();
        struct.setPublishedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operated = iprot.readString();
        struct.setOperatedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

