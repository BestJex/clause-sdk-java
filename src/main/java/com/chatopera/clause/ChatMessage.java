/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 聊天消息
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-16")
public class ChatMessage implements org.apache.thrift.TBase<ChatMessage, ChatMessage._Fields>, java.io.Serializable, Cloneable, Comparable<ChatMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatMessage");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHATBOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatbotID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("branch", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sender", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("receiver", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TEXT_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("textMessage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AUDIO_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("audioMessage", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VIDEO_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("videoMessage", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IMAGE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("imageMessage", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("terms", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField IS_FALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("is_fallback", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField IS_PROACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_proactive", org.apache.thrift.protocol.TType.BOOL, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatMessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String session_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String chatbotID; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  public int direction; // optional
  public int branch; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sender; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String receiver; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String createdate; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String textMessage; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String audioMessage; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String videoMessage; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String imageMessage; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> terms; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tags; // optional
  public boolean is_fallback; // optional
  public boolean is_proactive; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "session_id"),
    CHATBOT_ID((short)2, "chatbotID"),
    TYPE((short)3, "type"),
    DIRECTION((short)4, "direction"),
    BRANCH((short)5, "branch"),
    SENDER((short)6, "sender"),
    RECEIVER((short)7, "receiver"),
    CREATEDATE((short)8, "createdate"),
    ID((short)9, "id"),
    TEXT_MESSAGE((short)10, "textMessage"),
    AUDIO_MESSAGE((short)11, "audioMessage"),
    VIDEO_MESSAGE((short)12, "videoMessage"),
    IMAGE_MESSAGE((short)13, "imageMessage"),
    TERMS((short)14, "terms"),
    TAGS((short)15, "tags"),
    IS_FALLBACK((short)16, "is_fallback"),
    IS_PROACTIVE((short)17, "is_proactive");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // CHATBOT_ID
          return CHATBOT_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // DIRECTION
          return DIRECTION;
        case 5: // BRANCH
          return BRANCH;
        case 6: // SENDER
          return SENDER;
        case 7: // RECEIVER
          return RECEIVER;
        case 8: // CREATEDATE
          return CREATEDATE;
        case 9: // ID
          return ID;
        case 10: // TEXT_MESSAGE
          return TEXT_MESSAGE;
        case 11: // AUDIO_MESSAGE
          return AUDIO_MESSAGE;
        case 12: // VIDEO_MESSAGE
          return VIDEO_MESSAGE;
        case 13: // IMAGE_MESSAGE
          return IMAGE_MESSAGE;
        case 14: // TERMS
          return TERMS;
        case 15: // TAGS
          return TAGS;
        case 16: // IS_FALLBACK
          return IS_FALLBACK;
        case 17: // IS_PROACTIVE
          return IS_PROACTIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIRECTION_ISSET_ID = 0;
  private static final int __BRANCH_ISSET_ID = 1;
  private static final int __IS_FALLBACK_ISSET_ID = 2;
  private static final int __IS_PROACTIVE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SESSION_ID,_Fields.CHATBOT_ID,_Fields.TYPE,_Fields.DIRECTION,_Fields.BRANCH,_Fields.SENDER,_Fields.RECEIVER,_Fields.CREATEDATE,_Fields.ID,_Fields.TEXT_MESSAGE,_Fields.AUDIO_MESSAGE,_Fields.VIDEO_MESSAGE,_Fields.IMAGE_MESSAGE,_Fields.TERMS,_Fields.TAGS,_Fields.IS_FALLBACK,_Fields.IS_PROACTIVE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHATBOT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatbotID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRANCH, new org.apache.thrift.meta_data.FieldMetaData("branch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVER, new org.apache.thrift.meta_data.FieldMetaData("receiver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Timestamp")));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("textMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIO_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("audioMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIDEO_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("videoMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("imageMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TERMS, new org.apache.thrift.meta_data.FieldMetaData("terms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_FALLBACK, new org.apache.thrift.meta_data.FieldMetaData("is_fallback", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PROACTIVE, new org.apache.thrift.meta_data.FieldMetaData("is_proactive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatMessage.class, metaDataMap);
  }

  public ChatMessage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatMessage(ChatMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSession_id()) {
      this.session_id = other.session_id;
    }
    if (other.isSetChatbotID()) {
      this.chatbotID = other.chatbotID;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.direction = other.direction;
    this.branch = other.branch;
    if (other.isSetSender()) {
      this.sender = other.sender;
    }
    if (other.isSetReceiver()) {
      this.receiver = other.receiver;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTextMessage()) {
      this.textMessage = other.textMessage;
    }
    if (other.isSetAudioMessage()) {
      this.audioMessage = other.audioMessage;
    }
    if (other.isSetVideoMessage()) {
      this.videoMessage = other.videoMessage;
    }
    if (other.isSetImageMessage()) {
      this.imageMessage = other.imageMessage;
    }
    if (other.isSetTerms()) {
      java.util.List<java.lang.String> __this__terms = new java.util.ArrayList<java.lang.String>(other.terms);
      this.terms = __this__terms;
    }
    if (other.isSetTags()) {
      java.util.List<java.lang.String> __this__tags = new java.util.ArrayList<java.lang.String>(other.tags);
      this.tags = __this__tags;
    }
    this.is_fallback = other.is_fallback;
    this.is_proactive = other.is_proactive;
  }

  public ChatMessage deepCopy() {
    return new ChatMessage(this);
  }

  @Override
  public void clear() {
    this.session_id = null;
    this.chatbotID = null;
    this.type = null;
    setDirectionIsSet(false);
    this.direction = 0;
    setBranchIsSet(false);
    this.branch = 0;
    this.sender = null;
    this.receiver = null;
    this.createdate = null;
    this.id = null;
    this.textMessage = null;
    this.audioMessage = null;
    this.videoMessage = null;
    this.imageMessage = null;
    this.terms = null;
    this.tags = null;
    setIs_fallbackIsSet(false);
    this.is_fallback = false;
    setIs_proactiveIsSet(false);
    this.is_proactive = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSession_id() {
    return this.session_id;
  }

  public ChatMessage setSession_id(@org.apache.thrift.annotation.Nullable java.lang.String session_id) {
    this.session_id = session_id;
    return this;
  }

  public void unsetSession_id() {
    this.session_id = null;
  }

  /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSession_id() {
    return this.session_id != null;
  }

  public void setSession_idIsSet(boolean value) {
    if (!value) {
      this.session_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatbotID() {
    return this.chatbotID;
  }

  public ChatMessage setChatbotID(@org.apache.thrift.annotation.Nullable java.lang.String chatbotID) {
    this.chatbotID = chatbotID;
    return this;
  }

  public void unsetChatbotID() {
    this.chatbotID = null;
  }

  /** Returns true if field chatbotID is set (has been assigned a value) and false otherwise */
  public boolean isSetChatbotID() {
    return this.chatbotID != null;
  }

  public void setChatbotIDIsSet(boolean value) {
    if (!value) {
      this.chatbotID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public ChatMessage setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getDirection() {
    return this.direction;
  }

  public ChatMessage setDirection(int direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public int getBranch() {
    return this.branch;
  }

  public ChatMessage setBranch(int branch) {
    this.branch = branch;
    setBranchIsSet(true);
    return this;
  }

  public void unsetBranch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BRANCH_ISSET_ID);
  }

  /** Returns true if field branch is set (has been assigned a value) and false otherwise */
  public boolean isSetBranch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BRANCH_ISSET_ID);
  }

  public void setBranchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BRANCH_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSender() {
    return this.sender;
  }

  public ChatMessage setSender(@org.apache.thrift.annotation.Nullable java.lang.String sender) {
    this.sender = sender;
    return this;
  }

  public void unsetSender() {
    this.sender = null;
  }

  /** Returns true if field sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.sender = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReceiver() {
    return this.receiver;
  }

  public ChatMessage setReceiver(@org.apache.thrift.annotation.Nullable java.lang.String receiver) {
    this.receiver = receiver;
    return this;
  }

  public void unsetReceiver() {
    this.receiver = null;
  }

  /** Returns true if field receiver is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiver() {
    return this.receiver != null;
  }

  public void setReceiverIsSet(boolean value) {
    if (!value) {
      this.receiver = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCreatedate() {
    return this.createdate;
  }

  public ChatMessage setCreatedate(@org.apache.thrift.annotation.Nullable java.lang.String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public ChatMessage setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTextMessage() {
    return this.textMessage;
  }

  public ChatMessage setTextMessage(@org.apache.thrift.annotation.Nullable java.lang.String textMessage) {
    this.textMessage = textMessage;
    return this;
  }

  public void unsetTextMessage() {
    this.textMessage = null;
  }

  /** Returns true if field textMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetTextMessage() {
    return this.textMessage != null;
  }

  public void setTextMessageIsSet(boolean value) {
    if (!value) {
      this.textMessage = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAudioMessage() {
    return this.audioMessage;
  }

  public ChatMessage setAudioMessage(@org.apache.thrift.annotation.Nullable java.lang.String audioMessage) {
    this.audioMessage = audioMessage;
    return this;
  }

  public void unsetAudioMessage() {
    this.audioMessage = null;
  }

  /** Returns true if field audioMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioMessage() {
    return this.audioMessage != null;
  }

  public void setAudioMessageIsSet(boolean value) {
    if (!value) {
      this.audioMessage = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVideoMessage() {
    return this.videoMessage;
  }

  public ChatMessage setVideoMessage(@org.apache.thrift.annotation.Nullable java.lang.String videoMessage) {
    this.videoMessage = videoMessage;
    return this;
  }

  public void unsetVideoMessage() {
    this.videoMessage = null;
  }

  /** Returns true if field videoMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoMessage() {
    return this.videoMessage != null;
  }

  public void setVideoMessageIsSet(boolean value) {
    if (!value) {
      this.videoMessage = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageMessage() {
    return this.imageMessage;
  }

  public ChatMessage setImageMessage(@org.apache.thrift.annotation.Nullable java.lang.String imageMessage) {
    this.imageMessage = imageMessage;
    return this;
  }

  public void unsetImageMessage() {
    this.imageMessage = null;
  }

  /** Returns true if field imageMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetImageMessage() {
    return this.imageMessage != null;
  }

  public void setImageMessageIsSet(boolean value) {
    if (!value) {
      this.imageMessage = null;
    }
  }

  public int getTermsSize() {
    return (this.terms == null) ? 0 : this.terms.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTermsIterator() {
    return (this.terms == null) ? null : this.terms.iterator();
  }

  public void addToTerms(java.lang.String elem) {
    if (this.terms == null) {
      this.terms = new java.util.ArrayList<java.lang.String>();
    }
    this.terms.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getTerms() {
    return this.terms;
  }

  public ChatMessage setTerms(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> terms) {
    this.terms = terms;
    return this;
  }

  public void unsetTerms() {
    this.terms = null;
  }

  /** Returns true if field terms is set (has been assigned a value) and false otherwise */
  public boolean isSetTerms() {
    return this.terms != null;
  }

  public void setTermsIsSet(boolean value) {
    if (!value) {
      this.terms = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(java.lang.String elem) {
    if (this.tags == null) {
      this.tags = new java.util.ArrayList<java.lang.String>();
    }
    this.tags.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getTags() {
    return this.tags;
  }

  public ChatMessage setTags(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public boolean isIs_fallback() {
    return this.is_fallback;
  }

  public ChatMessage setIs_fallback(boolean is_fallback) {
    this.is_fallback = is_fallback;
    setIs_fallbackIsSet(true);
    return this;
  }

  public void unsetIs_fallback() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_FALLBACK_ISSET_ID);
  }

  /** Returns true if field is_fallback is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_fallback() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_FALLBACK_ISSET_ID);
  }

  public void setIs_fallbackIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_FALLBACK_ISSET_ID, value);
  }

  public boolean isIs_proactive() {
    return this.is_proactive;
  }

  public ChatMessage setIs_proactive(boolean is_proactive) {
    this.is_proactive = is_proactive;
    setIs_proactiveIsSet(true);
    return this;
  }

  public void unsetIs_proactive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PROACTIVE_ISSET_ID);
  }

  /** Returns true if field is_proactive is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_proactive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PROACTIVE_ISSET_ID);
  }

  public void setIs_proactiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PROACTIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSession_id();
      } else {
        setSession_id((java.lang.String)value);
      }
      break;

    case CHATBOT_ID:
      if (value == null) {
        unsetChatbotID();
      } else {
        setChatbotID((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((java.lang.Integer)value);
      }
      break;

    case BRANCH:
      if (value == null) {
        unsetBranch();
      } else {
        setBranch((java.lang.Integer)value);
      }
      break;

    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((java.lang.String)value);
      }
      break;

    case RECEIVER:
      if (value == null) {
        unsetReceiver();
      } else {
        setReceiver((java.lang.String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case TEXT_MESSAGE:
      if (value == null) {
        unsetTextMessage();
      } else {
        setTextMessage((java.lang.String)value);
      }
      break;

    case AUDIO_MESSAGE:
      if (value == null) {
        unsetAudioMessage();
      } else {
        setAudioMessage((java.lang.String)value);
      }
      break;

    case VIDEO_MESSAGE:
      if (value == null) {
        unsetVideoMessage();
      } else {
        setVideoMessage((java.lang.String)value);
      }
      break;

    case IMAGE_MESSAGE:
      if (value == null) {
        unsetImageMessage();
      } else {
        setImageMessage((java.lang.String)value);
      }
      break;

    case TERMS:
      if (value == null) {
        unsetTerms();
      } else {
        setTerms((java.util.List<java.lang.String>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.List<java.lang.String>)value);
      }
      break;

    case IS_FALLBACK:
      if (value == null) {
        unsetIs_fallback();
      } else {
        setIs_fallback((java.lang.Boolean)value);
      }
      break;

    case IS_PROACTIVE:
      if (value == null) {
        unsetIs_proactive();
      } else {
        setIs_proactive((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSession_id();

    case CHATBOT_ID:
      return getChatbotID();

    case TYPE:
      return getType();

    case DIRECTION:
      return getDirection();

    case BRANCH:
      return getBranch();

    case SENDER:
      return getSender();

    case RECEIVER:
      return getReceiver();

    case CREATEDATE:
      return getCreatedate();

    case ID:
      return getId();

    case TEXT_MESSAGE:
      return getTextMessage();

    case AUDIO_MESSAGE:
      return getAudioMessage();

    case VIDEO_MESSAGE:
      return getVideoMessage();

    case IMAGE_MESSAGE:
      return getImageMessage();

    case TERMS:
      return getTerms();

    case TAGS:
      return getTags();

    case IS_FALLBACK:
      return isIs_fallback();

    case IS_PROACTIVE:
      return isIs_proactive();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSession_id();
    case CHATBOT_ID:
      return isSetChatbotID();
    case TYPE:
      return isSetType();
    case DIRECTION:
      return isSetDirection();
    case BRANCH:
      return isSetBranch();
    case SENDER:
      return isSetSender();
    case RECEIVER:
      return isSetReceiver();
    case CREATEDATE:
      return isSetCreatedate();
    case ID:
      return isSetId();
    case TEXT_MESSAGE:
      return isSetTextMessage();
    case AUDIO_MESSAGE:
      return isSetAudioMessage();
    case VIDEO_MESSAGE:
      return isSetVideoMessage();
    case IMAGE_MESSAGE:
      return isSetImageMessage();
    case TERMS:
      return isSetTerms();
    case TAGS:
      return isSetTags();
    case IS_FALLBACK:
      return isSetIs_fallback();
    case IS_PROACTIVE:
      return isSetIs_proactive();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatMessage)
      return this.equals((ChatMessage)that);
    return false;
  }

  public boolean equals(ChatMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_session_id = true && this.isSetSession_id();
    boolean that_present_session_id = true && that.isSetSession_id();
    if (this_present_session_id || that_present_session_id) {
      if (!(this_present_session_id && that_present_session_id))
        return false;
      if (!this.session_id.equals(that.session_id))
        return false;
    }

    boolean this_present_chatbotID = true && this.isSetChatbotID();
    boolean that_present_chatbotID = true && that.isSetChatbotID();
    if (this_present_chatbotID || that_present_chatbotID) {
      if (!(this_present_chatbotID && that_present_chatbotID))
        return false;
      if (!this.chatbotID.equals(that.chatbotID))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_branch = true && this.isSetBranch();
    boolean that_present_branch = true && that.isSetBranch();
    if (this_present_branch || that_present_branch) {
      if (!(this_present_branch && that_present_branch))
        return false;
      if (this.branch != that.branch)
        return false;
    }

    boolean this_present_sender = true && this.isSetSender();
    boolean that_present_sender = true && that.isSetSender();
    if (this_present_sender || that_present_sender) {
      if (!(this_present_sender && that_present_sender))
        return false;
      if (!this.sender.equals(that.sender))
        return false;
    }

    boolean this_present_receiver = true && this.isSetReceiver();
    boolean that_present_receiver = true && that.isSetReceiver();
    if (this_present_receiver || that_present_receiver) {
      if (!(this_present_receiver && that_present_receiver))
        return false;
      if (!this.receiver.equals(that.receiver))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_textMessage = true && this.isSetTextMessage();
    boolean that_present_textMessage = true && that.isSetTextMessage();
    if (this_present_textMessage || that_present_textMessage) {
      if (!(this_present_textMessage && that_present_textMessage))
        return false;
      if (!this.textMessage.equals(that.textMessage))
        return false;
    }

    boolean this_present_audioMessage = true && this.isSetAudioMessage();
    boolean that_present_audioMessage = true && that.isSetAudioMessage();
    if (this_present_audioMessage || that_present_audioMessage) {
      if (!(this_present_audioMessage && that_present_audioMessage))
        return false;
      if (!this.audioMessage.equals(that.audioMessage))
        return false;
    }

    boolean this_present_videoMessage = true && this.isSetVideoMessage();
    boolean that_present_videoMessage = true && that.isSetVideoMessage();
    if (this_present_videoMessage || that_present_videoMessage) {
      if (!(this_present_videoMessage && that_present_videoMessage))
        return false;
      if (!this.videoMessage.equals(that.videoMessage))
        return false;
    }

    boolean this_present_imageMessage = true && this.isSetImageMessage();
    boolean that_present_imageMessage = true && that.isSetImageMessage();
    if (this_present_imageMessage || that_present_imageMessage) {
      if (!(this_present_imageMessage && that_present_imageMessage))
        return false;
      if (!this.imageMessage.equals(that.imageMessage))
        return false;
    }

    boolean this_present_terms = true && this.isSetTerms();
    boolean that_present_terms = true && that.isSetTerms();
    if (this_present_terms || that_present_terms) {
      if (!(this_present_terms && that_present_terms))
        return false;
      if (!this.terms.equals(that.terms))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_is_fallback = true && this.isSetIs_fallback();
    boolean that_present_is_fallback = true && that.isSetIs_fallback();
    if (this_present_is_fallback || that_present_is_fallback) {
      if (!(this_present_is_fallback && that_present_is_fallback))
        return false;
      if (this.is_fallback != that.is_fallback)
        return false;
    }

    boolean this_present_is_proactive = true && this.isSetIs_proactive();
    boolean that_present_is_proactive = true && that.isSetIs_proactive();
    if (this_present_is_proactive || that_present_is_proactive) {
      if (!(this_present_is_proactive && that_present_is_proactive))
        return false;
      if (this.is_proactive != that.is_proactive)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSession_id()) ? 131071 : 524287);
    if (isSetSession_id())
      hashCode = hashCode * 8191 + session_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatbotID()) ? 131071 : 524287);
    if (isSetChatbotID())
      hashCode = hashCode * 8191 + chatbotID.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetDirection()) ? 131071 : 524287);
    if (isSetDirection())
      hashCode = hashCode * 8191 + direction;

    hashCode = hashCode * 8191 + ((isSetBranch()) ? 131071 : 524287);
    if (isSetBranch())
      hashCode = hashCode * 8191 + branch;

    hashCode = hashCode * 8191 + ((isSetSender()) ? 131071 : 524287);
    if (isSetSender())
      hashCode = hashCode * 8191 + sender.hashCode();

    hashCode = hashCode * 8191 + ((isSetReceiver()) ? 131071 : 524287);
    if (isSetReceiver())
      hashCode = hashCode * 8191 + receiver.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedate()) ? 131071 : 524287);
    if (isSetCreatedate())
      hashCode = hashCode * 8191 + createdate.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTextMessage()) ? 131071 : 524287);
    if (isSetTextMessage())
      hashCode = hashCode * 8191 + textMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetAudioMessage()) ? 131071 : 524287);
    if (isSetAudioMessage())
      hashCode = hashCode * 8191 + audioMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetVideoMessage()) ? 131071 : 524287);
    if (isSetVideoMessage())
      hashCode = hashCode * 8191 + videoMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageMessage()) ? 131071 : 524287);
    if (isSetImageMessage())
      hashCode = hashCode * 8191 + imageMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetTerms()) ? 131071 : 524287);
    if (isSetTerms())
      hashCode = hashCode * 8191 + terms.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_fallback()) ? 131071 : 524287);
    if (isSetIs_fallback())
      hashCode = hashCode * 8191 + ((is_fallback) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIs_proactive()) ? 131071 : 524287);
    if (isSetIs_proactive())
      hashCode = hashCode * 8191 + ((is_proactive) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ChatMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChatbotID()).compareTo(other.isSetChatbotID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatbotID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatbotID, other.chatbotID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBranch()).compareTo(other.isSetBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch, other.branch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, other.sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceiver()).compareTo(other.isSetReceiver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiver, other.receiver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedate()).compareTo(other.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, other.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTextMessage()).compareTo(other.isSetTextMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textMessage, other.textMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAudioMessage()).compareTo(other.isSetAudioMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioMessage, other.audioMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVideoMessage()).compareTo(other.isSetVideoMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoMessage, other.videoMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImageMessage()).compareTo(other.isSetImageMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageMessage, other.imageMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTerms()).compareTo(other.isSetTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terms, other.terms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_fallback()).compareTo(other.isSetIs_fallback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_fallback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_fallback, other.is_fallback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_proactive()).compareTo(other.isSetIs_proactive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_proactive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_proactive, other.is_proactive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChatMessage(");
    boolean first = true;

    if (isSetSession_id()) {
      sb.append("session_id:");
      if (this.session_id == null) {
        sb.append("null");
      } else {
        sb.append(this.session_id);
      }
      first = false;
    }
    if (isSetChatbotID()) {
      if (!first) sb.append(", ");
      sb.append("chatbotID:");
      if (this.chatbotID == null) {
        sb.append("null");
      } else {
        sb.append(this.chatbotID);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      sb.append(this.direction);
      first = false;
    }
    if (isSetBranch()) {
      if (!first) sb.append(", ");
      sb.append("branch:");
      sb.append(this.branch);
      first = false;
    }
    if (isSetSender()) {
      if (!first) sb.append(", ");
      sb.append("sender:");
      if (this.sender == null) {
        sb.append("null");
      } else {
        sb.append(this.sender);
      }
      first = false;
    }
    if (isSetReceiver()) {
      if (!first) sb.append(", ");
      sb.append("receiver:");
      if (this.receiver == null) {
        sb.append("null");
      } else {
        sb.append(this.receiver);
      }
      first = false;
    }
    if (isSetCreatedate()) {
      if (!first) sb.append(", ");
      sb.append("createdate:");
      if (this.createdate == null) {
        sb.append("null");
      } else {
        sb.append(this.createdate);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetTextMessage()) {
      if (!first) sb.append(", ");
      sb.append("textMessage:");
      if (this.textMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.textMessage);
      }
      first = false;
    }
    if (isSetAudioMessage()) {
      if (!first) sb.append(", ");
      sb.append("audioMessage:");
      if (this.audioMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.audioMessage);
      }
      first = false;
    }
    if (isSetVideoMessage()) {
      if (!first) sb.append(", ");
      sb.append("videoMessage:");
      if (this.videoMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.videoMessage);
      }
      first = false;
    }
    if (isSetImageMessage()) {
      if (!first) sb.append(", ");
      sb.append("imageMessage:");
      if (this.imageMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.imageMessage);
      }
      first = false;
    }
    if (isSetTerms()) {
      if (!first) sb.append(", ");
      sb.append("terms:");
      if (this.terms == null) {
        sb.append("null");
      } else {
        sb.append(this.terms);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetIs_fallback()) {
      if (!first) sb.append(", ");
      sb.append("is_fallback:");
      sb.append(this.is_fallback);
      first = false;
    }
    if (isSetIs_proactive()) {
      if (!first) sb.append(", ");
      sb.append("is_proactive:");
      sb.append(this.is_proactive);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatMessageStandardScheme getScheme() {
      return new ChatMessageStandardScheme();
    }
  }

  private static class ChatMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChatMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.session_id = iprot.readString();
              struct.setSession_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHATBOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatbotID = iprot.readString();
              struct.setChatbotIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = iprot.readI32();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.branch = iprot.readI32();
              struct.setBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sender = iprot.readString();
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECEIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiver = iprot.readString();
              struct.setReceiverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEXT_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.textMessage = iprot.readString();
              struct.setTextMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AUDIO_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audioMessage = iprot.readString();
              struct.setAudioMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VIDEO_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.videoMessage = iprot.readString();
              struct.setVideoMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IMAGE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageMessage = iprot.readString();
              struct.setImageMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.terms = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.terms.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.tags = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.tags.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_FALLBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_fallback = iprot.readBool();
              struct.setIs_fallbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_PROACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_proactive = iprot.readBool();
              struct.setIs_proactiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.session_id != null) {
        if (struct.isSetSession_id()) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.session_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatbotID != null) {
        if (struct.isSetChatbotID()) {
          oprot.writeFieldBegin(CHATBOT_ID_FIELD_DESC);
          oprot.writeString(struct.chatbotID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDirection()) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBranch()) {
        oprot.writeFieldBegin(BRANCH_FIELD_DESC);
        oprot.writeI32(struct.branch);
        oprot.writeFieldEnd();
      }
      if (struct.sender != null) {
        if (struct.isSetSender()) {
          oprot.writeFieldBegin(SENDER_FIELD_DESC);
          oprot.writeString(struct.sender);
          oprot.writeFieldEnd();
        }
      }
      if (struct.receiver != null) {
        if (struct.isSetReceiver()) {
          oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
          oprot.writeString(struct.receiver);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdate != null) {
        if (struct.isSetCreatedate()) {
          oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
          oprot.writeString(struct.createdate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.textMessage != null) {
        if (struct.isSetTextMessage()) {
          oprot.writeFieldBegin(TEXT_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.textMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioMessage != null) {
        if (struct.isSetAudioMessage()) {
          oprot.writeFieldBegin(AUDIO_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.audioMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.videoMessage != null) {
        if (struct.isSetVideoMessage()) {
          oprot.writeFieldBegin(VIDEO_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.videoMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageMessage != null) {
        if (struct.isSetImageMessage()) {
          oprot.writeFieldBegin(IMAGE_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.imageMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.terms != null) {
        if (struct.isSetTerms()) {
          oprot.writeFieldBegin(TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.terms.size()));
            for (java.lang.String _iter6 : struct.terms)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (java.lang.String _iter7 : struct.tags)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_fallback()) {
        oprot.writeFieldBegin(IS_FALLBACK_FIELD_DESC);
        oprot.writeBool(struct.is_fallback);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_proactive()) {
        oprot.writeFieldBegin(IS_PROACTIVE_FIELD_DESC);
        oprot.writeBool(struct.is_proactive);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatMessageTupleScheme getScheme() {
      return new ChatMessageTupleScheme();
    }
  }

  private static class ChatMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChatMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSession_id()) {
        optionals.set(0);
      }
      if (struct.isSetChatbotID()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetDirection()) {
        optionals.set(3);
      }
      if (struct.isSetBranch()) {
        optionals.set(4);
      }
      if (struct.isSetSender()) {
        optionals.set(5);
      }
      if (struct.isSetReceiver()) {
        optionals.set(6);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(7);
      }
      if (struct.isSetId()) {
        optionals.set(8);
      }
      if (struct.isSetTextMessage()) {
        optionals.set(9);
      }
      if (struct.isSetAudioMessage()) {
        optionals.set(10);
      }
      if (struct.isSetVideoMessage()) {
        optionals.set(11);
      }
      if (struct.isSetImageMessage()) {
        optionals.set(12);
      }
      if (struct.isSetTerms()) {
        optionals.set(13);
      }
      if (struct.isSetTags()) {
        optionals.set(14);
      }
      if (struct.isSetIs_fallback()) {
        optionals.set(15);
      }
      if (struct.isSetIs_proactive()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetSession_id()) {
        oprot.writeString(struct.session_id);
      }
      if (struct.isSetChatbotID()) {
        oprot.writeString(struct.chatbotID);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction);
      }
      if (struct.isSetBranch()) {
        oprot.writeI32(struct.branch);
      }
      if (struct.isSetSender()) {
        oprot.writeString(struct.sender);
      }
      if (struct.isSetReceiver()) {
        oprot.writeString(struct.receiver);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTextMessage()) {
        oprot.writeString(struct.textMessage);
      }
      if (struct.isSetAudioMessage()) {
        oprot.writeString(struct.audioMessage);
      }
      if (struct.isSetVideoMessage()) {
        oprot.writeString(struct.videoMessage);
      }
      if (struct.isSetImageMessage()) {
        oprot.writeString(struct.imageMessage);
      }
      if (struct.isSetTerms()) {
        {
          oprot.writeI32(struct.terms.size());
          for (java.lang.String _iter8 : struct.terms)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (java.lang.String _iter9 : struct.tags)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetIs_fallback()) {
        oprot.writeBool(struct.is_fallback);
      }
      if (struct.isSetIs_proactive()) {
        oprot.writeBool(struct.is_proactive);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.session_id = iprot.readString();
        struct.setSession_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chatbotID = iprot.readString();
        struct.setChatbotIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.direction = iprot.readI32();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.branch = iprot.readI32();
        struct.setBranchIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sender = iprot.readString();
        struct.setSenderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.receiver = iprot.readString();
        struct.setReceiverIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.textMessage = iprot.readString();
        struct.setTextMessageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.audioMessage = iprot.readString();
        struct.setAudioMessageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.videoMessage = iprot.readString();
        struct.setVideoMessageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.imageMessage = iprot.readString();
        struct.setImageMessageIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.terms = new java.util.ArrayList<java.lang.String>(_list10.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.terms.add(_elem11);
          }
        }
        struct.setTermsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new java.util.ArrayList<java.lang.String>(_list13.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.tags.add(_elem14);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.is_fallback = iprot.readBool();
        struct.setIs_fallbackIsSet(true);
      }
      if (incoming.get(16)) {
        struct.is_proactive = iprot.readBool();
        struct.setIs_proactiveIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

