/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.chatopera.clause;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Clause Data Bundle
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-07")
public class Data implements org.apache.thrift.TBase<Data, Data._Fields>, java.io.Serializable, Cloneable, Comparable<Data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data");

  private static final org.apache.thrift.protocol.TField RC_FIELD_DESC = new org.apache.thrift.protocol.TField("rc", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHATBOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatbotID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CUSTOMDICTS_FIELD_DESC = new org.apache.thrift.protocol.TField("customdicts", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SYSDICTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sysdicts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BOTSYSDICTS_FIELD_DESC = new org.apache.thrift.protocol.TField("botsysdicts", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DICTWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dictwords", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CUSTOMDICT_FIELD_DESC = new org.apache.thrift.protocol.TField("customdict", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SYSDICT_FIELD_DESC = new org.apache.thrift.protocol.TField("sysdict", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField BOTSYSDICT_FIELD_DESC = new org.apache.thrift.protocol.TField("botsysdict", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DICTWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("dictword", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField INTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("intents", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("slots", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField UTTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("utters", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField INTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("intent", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField SLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("slot", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField UTTER_FIELD_DESC = new org.apache.thrift.protocol.TField("utter", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField DEVVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("devvers", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField PROVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("provers", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField DEVVER_FIELD_DESC = new org.apache.thrift.protocol.TField("devver", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField PROVER_FIELD_DESC = new org.apache.thrift.protocol.TField("prover", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField SESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("sessions", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField CURRPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currpage", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField TOTALPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalpage", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField TOTALROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalrows", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)33);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DataTupleSchemeFactory();

  public int rc; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String error; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String msg; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String chatbotID; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Dict> customdicts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Dict> sysdicts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<BotSysdict> botsysdicts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<DictWord> dictwords; // optional
  public @org.apache.thrift.annotation.Nullable Dict customdict; // optional
  public @org.apache.thrift.annotation.Nullable Dict sysdict; // optional
  public @org.apache.thrift.annotation.Nullable BotSysdict botsysdict; // optional
  public @org.apache.thrift.annotation.Nullable DictWord dictword; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<Intent> intents; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<IntentSlot> slots; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<IntentUtter> utters; // optional
  public @org.apache.thrift.annotation.Nullable Intent intent; // optional
  public @org.apache.thrift.annotation.Nullable IntentSlot slot; // optional
  public @org.apache.thrift.annotation.Nullable IntentUtter utter; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<DevelopVersion> devvers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ProdVersion> provers; // optional
  public @org.apache.thrift.annotation.Nullable DevelopVersion devver; // optional
  public @org.apache.thrift.annotation.Nullable ProdVersion prover; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ChatSession> sessions; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ChatMessage> messages; // optional
  public @org.apache.thrift.annotation.Nullable ChatSession session; // optional
  public @org.apache.thrift.annotation.Nullable ChatMessage message; // optional
  public int currpage; // optional
  public int totalpage; // optional
  public int totalrows; // optional
  public int pagesize; // optional
  public int page; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String query; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RC((short)1, "rc"),
    ERROR((short)2, "error"),
    MSG((short)3, "msg"),
    ID((short)4, "id"),
    CHATBOT_ID((short)5, "chatbotID"),
    CUSTOMDICTS((short)6, "customdicts"),
    SYSDICTS((short)7, "sysdicts"),
    BOTSYSDICTS((short)8, "botsysdicts"),
    DICTWORDS((short)9, "dictwords"),
    CUSTOMDICT((short)10, "customdict"),
    SYSDICT((short)11, "sysdict"),
    BOTSYSDICT((short)12, "botsysdict"),
    DICTWORD((short)13, "dictword"),
    INTENTS((short)14, "intents"),
    SLOTS((short)15, "slots"),
    UTTERS((short)16, "utters"),
    INTENT((short)17, "intent"),
    SLOT((short)18, "slot"),
    UTTER((short)19, "utter"),
    DEVVERS((short)20, "devvers"),
    PROVERS((short)21, "provers"),
    DEVVER((short)22, "devver"),
    PROVER((short)23, "prover"),
    SESSIONS((short)24, "sessions"),
    MESSAGES((short)25, "messages"),
    SESSION((short)26, "session"),
    MESSAGE((short)27, "message"),
    CURRPAGE((short)28, "currpage"),
    TOTALPAGE((short)29, "totalpage"),
    TOTALROWS((short)30, "totalrows"),
    PAGESIZE((short)31, "pagesize"),
    PAGE((short)32, "page"),
    QUERY((short)33, "query");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RC
          return RC;
        case 2: // ERROR
          return ERROR;
        case 3: // MSG
          return MSG;
        case 4: // ID
          return ID;
        case 5: // CHATBOT_ID
          return CHATBOT_ID;
        case 6: // CUSTOMDICTS
          return CUSTOMDICTS;
        case 7: // SYSDICTS
          return SYSDICTS;
        case 8: // BOTSYSDICTS
          return BOTSYSDICTS;
        case 9: // DICTWORDS
          return DICTWORDS;
        case 10: // CUSTOMDICT
          return CUSTOMDICT;
        case 11: // SYSDICT
          return SYSDICT;
        case 12: // BOTSYSDICT
          return BOTSYSDICT;
        case 13: // DICTWORD
          return DICTWORD;
        case 14: // INTENTS
          return INTENTS;
        case 15: // SLOTS
          return SLOTS;
        case 16: // UTTERS
          return UTTERS;
        case 17: // INTENT
          return INTENT;
        case 18: // SLOT
          return SLOT;
        case 19: // UTTER
          return UTTER;
        case 20: // DEVVERS
          return DEVVERS;
        case 21: // PROVERS
          return PROVERS;
        case 22: // DEVVER
          return DEVVER;
        case 23: // PROVER
          return PROVER;
        case 24: // SESSIONS
          return SESSIONS;
        case 25: // MESSAGES
          return MESSAGES;
        case 26: // SESSION
          return SESSION;
        case 27: // MESSAGE
          return MESSAGE;
        case 28: // CURRPAGE
          return CURRPAGE;
        case 29: // TOTALPAGE
          return TOTALPAGE;
        case 30: // TOTALROWS
          return TOTALROWS;
        case 31: // PAGESIZE
          return PAGESIZE;
        case 32: // PAGE
          return PAGE;
        case 33: // QUERY
          return QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RC_ISSET_ID = 0;
  private static final int __CURRPAGE_ISSET_ID = 1;
  private static final int __TOTALPAGE_ISSET_ID = 2;
  private static final int __TOTALROWS_ISSET_ID = 3;
  private static final int __PAGESIZE_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RC,_Fields.ERROR,_Fields.MSG,_Fields.ID,_Fields.CHATBOT_ID,_Fields.CUSTOMDICTS,_Fields.SYSDICTS,_Fields.BOTSYSDICTS,_Fields.DICTWORDS,_Fields.CUSTOMDICT,_Fields.SYSDICT,_Fields.BOTSYSDICT,_Fields.DICTWORD,_Fields.INTENTS,_Fields.SLOTS,_Fields.UTTERS,_Fields.INTENT,_Fields.SLOT,_Fields.UTTER,_Fields.DEVVERS,_Fields.PROVERS,_Fields.DEVVER,_Fields.PROVER,_Fields.SESSIONS,_Fields.MESSAGES,_Fields.SESSION,_Fields.MESSAGE,_Fields.CURRPAGE,_Fields.TOTALPAGE,_Fields.TOTALROWS,_Fields.PAGESIZE,_Fields.PAGE,_Fields.QUERY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RC, new org.apache.thrift.meta_data.FieldMetaData("rc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHATBOT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatbotID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMDICTS, new org.apache.thrift.meta_data.FieldMetaData("customdicts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "CustomDict"))));
    tmpMap.put(_Fields.SYSDICTS, new org.apache.thrift.meta_data.FieldMetaData("sysdicts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SysDict"))));
    tmpMap.put(_Fields.BOTSYSDICTS, new org.apache.thrift.meta_data.FieldMetaData("botsysdicts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BotSysdict.class))));
    tmpMap.put(_Fields.DICTWORDS, new org.apache.thrift.meta_data.FieldMetaData("dictwords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DictWord.class))));
    tmpMap.put(_Fields.CUSTOMDICT, new org.apache.thrift.meta_data.FieldMetaData("customdict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "CustomDict")));
    tmpMap.put(_Fields.SYSDICT, new org.apache.thrift.meta_data.FieldMetaData("sysdict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "SysDict")));
    tmpMap.put(_Fields.BOTSYSDICT, new org.apache.thrift.meta_data.FieldMetaData("botsysdict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BotSysdict.class)));
    tmpMap.put(_Fields.DICTWORD, new org.apache.thrift.meta_data.FieldMetaData("dictword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DictWord.class)));
    tmpMap.put(_Fields.INTENTS, new org.apache.thrift.meta_data.FieldMetaData("intents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Intent.class))));
    tmpMap.put(_Fields.SLOTS, new org.apache.thrift.meta_data.FieldMetaData("slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntentSlot.class))));
    tmpMap.put(_Fields.UTTERS, new org.apache.thrift.meta_data.FieldMetaData("utters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntentUtter.class))));
    tmpMap.put(_Fields.INTENT, new org.apache.thrift.meta_data.FieldMetaData("intent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Intent.class)));
    tmpMap.put(_Fields.SLOT, new org.apache.thrift.meta_data.FieldMetaData("slot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntentSlot.class)));
    tmpMap.put(_Fields.UTTER, new org.apache.thrift.meta_data.FieldMetaData("utter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntentUtter.class)));
    tmpMap.put(_Fields.DEVVERS, new org.apache.thrift.meta_data.FieldMetaData("devvers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DevelopVersion.class))));
    tmpMap.put(_Fields.PROVERS, new org.apache.thrift.meta_data.FieldMetaData("provers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProdVersion.class))));
    tmpMap.put(_Fields.DEVVER, new org.apache.thrift.meta_data.FieldMetaData("devver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DevelopVersion.class)));
    tmpMap.put(_Fields.PROVER, new org.apache.thrift.meta_data.FieldMetaData("prover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProdVersion.class)));
    tmpMap.put(_Fields.SESSIONS, new org.apache.thrift.meta_data.FieldMetaData("sessions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatSession.class))));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatMessage.class))));
    tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatSession.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatMessage.class)));
    tmpMap.put(_Fields.CURRPAGE, new org.apache.thrift.meta_data.FieldMetaData("currpage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTALPAGE, new org.apache.thrift.meta_data.FieldMetaData("totalpage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTALROWS, new org.apache.thrift.meta_data.FieldMetaData("totalrows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data.class, metaDataMap);
  }

  public Data() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data(Data other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rc = other.rc;
    if (other.isSetError()) {
      this.error = other.error;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetChatbotID()) {
      this.chatbotID = other.chatbotID;
    }
    if (other.isSetCustomdicts()) {
      java.util.List<Dict> __this__customdicts = new java.util.ArrayList<Dict>(other.customdicts.size());
      for (Dict other_element : other.customdicts) {
        __this__customdicts.add(new Dict(other_element));
      }
      this.customdicts = __this__customdicts;
    }
    if (other.isSetSysdicts()) {
      java.util.List<Dict> __this__sysdicts = new java.util.ArrayList<Dict>(other.sysdicts.size());
      for (Dict other_element : other.sysdicts) {
        __this__sysdicts.add(new Dict(other_element));
      }
      this.sysdicts = __this__sysdicts;
    }
    if (other.isSetBotsysdicts()) {
      java.util.List<BotSysdict> __this__botsysdicts = new java.util.ArrayList<BotSysdict>(other.botsysdicts.size());
      for (BotSysdict other_element : other.botsysdicts) {
        __this__botsysdicts.add(new BotSysdict(other_element));
      }
      this.botsysdicts = __this__botsysdicts;
    }
    if (other.isSetDictwords()) {
      java.util.List<DictWord> __this__dictwords = new java.util.ArrayList<DictWord>(other.dictwords.size());
      for (DictWord other_element : other.dictwords) {
        __this__dictwords.add(new DictWord(other_element));
      }
      this.dictwords = __this__dictwords;
    }
    if (other.isSetCustomdict()) {
      this.customdict = new Dict(other.customdict);
    }
    if (other.isSetSysdict()) {
      this.sysdict = new Dict(other.sysdict);
    }
    if (other.isSetBotsysdict()) {
      this.botsysdict = new BotSysdict(other.botsysdict);
    }
    if (other.isSetDictword()) {
      this.dictword = new DictWord(other.dictword);
    }
    if (other.isSetIntents()) {
      java.util.List<Intent> __this__intents = new java.util.ArrayList<Intent>(other.intents.size());
      for (Intent other_element : other.intents) {
        __this__intents.add(new Intent(other_element));
      }
      this.intents = __this__intents;
    }
    if (other.isSetSlots()) {
      java.util.List<IntentSlot> __this__slots = new java.util.ArrayList<IntentSlot>(other.slots.size());
      for (IntentSlot other_element : other.slots) {
        __this__slots.add(new IntentSlot(other_element));
      }
      this.slots = __this__slots;
    }
    if (other.isSetUtters()) {
      java.util.List<IntentUtter> __this__utters = new java.util.ArrayList<IntentUtter>(other.utters.size());
      for (IntentUtter other_element : other.utters) {
        __this__utters.add(new IntentUtter(other_element));
      }
      this.utters = __this__utters;
    }
    if (other.isSetIntent()) {
      this.intent = new Intent(other.intent);
    }
    if (other.isSetSlot()) {
      this.slot = new IntentSlot(other.slot);
    }
    if (other.isSetUtter()) {
      this.utter = new IntentUtter(other.utter);
    }
    if (other.isSetDevvers()) {
      java.util.List<DevelopVersion> __this__devvers = new java.util.ArrayList<DevelopVersion>(other.devvers.size());
      for (DevelopVersion other_element : other.devvers) {
        __this__devvers.add(new DevelopVersion(other_element));
      }
      this.devvers = __this__devvers;
    }
    if (other.isSetProvers()) {
      java.util.List<ProdVersion> __this__provers = new java.util.ArrayList<ProdVersion>(other.provers.size());
      for (ProdVersion other_element : other.provers) {
        __this__provers.add(new ProdVersion(other_element));
      }
      this.provers = __this__provers;
    }
    if (other.isSetDevver()) {
      this.devver = new DevelopVersion(other.devver);
    }
    if (other.isSetProver()) {
      this.prover = new ProdVersion(other.prover);
    }
    if (other.isSetSessions()) {
      java.util.List<ChatSession> __this__sessions = new java.util.ArrayList<ChatSession>(other.sessions.size());
      for (ChatSession other_element : other.sessions) {
        __this__sessions.add(new ChatSession(other_element));
      }
      this.sessions = __this__sessions;
    }
    if (other.isSetMessages()) {
      java.util.List<ChatMessage> __this__messages = new java.util.ArrayList<ChatMessage>(other.messages.size());
      for (ChatMessage other_element : other.messages) {
        __this__messages.add(new ChatMessage(other_element));
      }
      this.messages = __this__messages;
    }
    if (other.isSetSession()) {
      this.session = new ChatSession(other.session);
    }
    if (other.isSetMessage()) {
      this.message = new ChatMessage(other.message);
    }
    this.currpage = other.currpage;
    this.totalpage = other.totalpage;
    this.totalrows = other.totalrows;
    this.pagesize = other.pagesize;
    this.page = other.page;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
  }

  public Data deepCopy() {
    return new Data(this);
  }

  @Override
  public void clear() {
    setRcIsSet(false);
    this.rc = 0;
    this.error = null;
    this.msg = null;
    this.id = null;
    this.chatbotID = null;
    this.customdicts = null;
    this.sysdicts = null;
    this.botsysdicts = null;
    this.dictwords = null;
    this.customdict = null;
    this.sysdict = null;
    this.botsysdict = null;
    this.dictword = null;
    this.intents = null;
    this.slots = null;
    this.utters = null;
    this.intent = null;
    this.slot = null;
    this.utter = null;
    this.devvers = null;
    this.provers = null;
    this.devver = null;
    this.prover = null;
    this.sessions = null;
    this.messages = null;
    this.session = null;
    this.message = null;
    setCurrpageIsSet(false);
    this.currpage = 0;
    setTotalpageIsSet(false);
    this.totalpage = 0;
    setTotalrowsIsSet(false);
    this.totalrows = 0;
    setPagesizeIsSet(false);
    this.pagesize = 0;
    setPageIsSet(false);
    this.page = 0;
    this.query = null;
  }

  public int getRc() {
    return this.rc;
  }

  public Data setRc(int rc) {
    this.rc = rc;
    setRcIsSet(true);
    return this;
  }

  public void unsetRc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RC_ISSET_ID);
  }

  /** Returns true if field rc is set (has been assigned a value) and false otherwise */
  public boolean isSetRc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RC_ISSET_ID);
  }

  public void setRcIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RC_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError() {
    return this.error;
  }

  public Data setError(@org.apache.thrift.annotation.Nullable java.lang.String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMsg() {
    return this.msg;
  }

  public Data setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public Data setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatbotID() {
    return this.chatbotID;
  }

  public Data setChatbotID(@org.apache.thrift.annotation.Nullable java.lang.String chatbotID) {
    this.chatbotID = chatbotID;
    return this;
  }

  public void unsetChatbotID() {
    this.chatbotID = null;
  }

  /** Returns true if field chatbotID is set (has been assigned a value) and false otherwise */
  public boolean isSetChatbotID() {
    return this.chatbotID != null;
  }

  public void setChatbotIDIsSet(boolean value) {
    if (!value) {
      this.chatbotID = null;
    }
  }

  public int getCustomdictsSize() {
    return (this.customdicts == null) ? 0 : this.customdicts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Dict> getCustomdictsIterator() {
    return (this.customdicts == null) ? null : this.customdicts.iterator();
  }

  public void addToCustomdicts(Dict elem) {
    if (this.customdicts == null) {
      this.customdicts = new java.util.ArrayList<Dict>();
    }
    this.customdicts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Dict> getCustomdicts() {
    return this.customdicts;
  }

  public Data setCustomdicts(@org.apache.thrift.annotation.Nullable java.util.List<Dict> customdicts) {
    this.customdicts = customdicts;
    return this;
  }

  public void unsetCustomdicts() {
    this.customdicts = null;
  }

  /** Returns true if field customdicts is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomdicts() {
    return this.customdicts != null;
  }

  public void setCustomdictsIsSet(boolean value) {
    if (!value) {
      this.customdicts = null;
    }
  }

  public int getSysdictsSize() {
    return (this.sysdicts == null) ? 0 : this.sysdicts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Dict> getSysdictsIterator() {
    return (this.sysdicts == null) ? null : this.sysdicts.iterator();
  }

  public void addToSysdicts(Dict elem) {
    if (this.sysdicts == null) {
      this.sysdicts = new java.util.ArrayList<Dict>();
    }
    this.sysdicts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Dict> getSysdicts() {
    return this.sysdicts;
  }

  public Data setSysdicts(@org.apache.thrift.annotation.Nullable java.util.List<Dict> sysdicts) {
    this.sysdicts = sysdicts;
    return this;
  }

  public void unsetSysdicts() {
    this.sysdicts = null;
  }

  /** Returns true if field sysdicts is set (has been assigned a value) and false otherwise */
  public boolean isSetSysdicts() {
    return this.sysdicts != null;
  }

  public void setSysdictsIsSet(boolean value) {
    if (!value) {
      this.sysdicts = null;
    }
  }

  public int getBotsysdictsSize() {
    return (this.botsysdicts == null) ? 0 : this.botsysdicts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<BotSysdict> getBotsysdictsIterator() {
    return (this.botsysdicts == null) ? null : this.botsysdicts.iterator();
  }

  public void addToBotsysdicts(BotSysdict elem) {
    if (this.botsysdicts == null) {
      this.botsysdicts = new java.util.ArrayList<BotSysdict>();
    }
    this.botsysdicts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<BotSysdict> getBotsysdicts() {
    return this.botsysdicts;
  }

  public Data setBotsysdicts(@org.apache.thrift.annotation.Nullable java.util.List<BotSysdict> botsysdicts) {
    this.botsysdicts = botsysdicts;
    return this;
  }

  public void unsetBotsysdicts() {
    this.botsysdicts = null;
  }

  /** Returns true if field botsysdicts is set (has been assigned a value) and false otherwise */
  public boolean isSetBotsysdicts() {
    return this.botsysdicts != null;
  }

  public void setBotsysdictsIsSet(boolean value) {
    if (!value) {
      this.botsysdicts = null;
    }
  }

  public int getDictwordsSize() {
    return (this.dictwords == null) ? 0 : this.dictwords.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<DictWord> getDictwordsIterator() {
    return (this.dictwords == null) ? null : this.dictwords.iterator();
  }

  public void addToDictwords(DictWord elem) {
    if (this.dictwords == null) {
      this.dictwords = new java.util.ArrayList<DictWord>();
    }
    this.dictwords.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<DictWord> getDictwords() {
    return this.dictwords;
  }

  public Data setDictwords(@org.apache.thrift.annotation.Nullable java.util.List<DictWord> dictwords) {
    this.dictwords = dictwords;
    return this;
  }

  public void unsetDictwords() {
    this.dictwords = null;
  }

  /** Returns true if field dictwords is set (has been assigned a value) and false otherwise */
  public boolean isSetDictwords() {
    return this.dictwords != null;
  }

  public void setDictwordsIsSet(boolean value) {
    if (!value) {
      this.dictwords = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Dict getCustomdict() {
    return this.customdict;
  }

  public Data setCustomdict(@org.apache.thrift.annotation.Nullable Dict customdict) {
    this.customdict = customdict;
    return this;
  }

  public void unsetCustomdict() {
    this.customdict = null;
  }

  /** Returns true if field customdict is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomdict() {
    return this.customdict != null;
  }

  public void setCustomdictIsSet(boolean value) {
    if (!value) {
      this.customdict = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Dict getSysdict() {
    return this.sysdict;
  }

  public Data setSysdict(@org.apache.thrift.annotation.Nullable Dict sysdict) {
    this.sysdict = sysdict;
    return this;
  }

  public void unsetSysdict() {
    this.sysdict = null;
  }

  /** Returns true if field sysdict is set (has been assigned a value) and false otherwise */
  public boolean isSetSysdict() {
    return this.sysdict != null;
  }

  public void setSysdictIsSet(boolean value) {
    if (!value) {
      this.sysdict = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public BotSysdict getBotsysdict() {
    return this.botsysdict;
  }

  public Data setBotsysdict(@org.apache.thrift.annotation.Nullable BotSysdict botsysdict) {
    this.botsysdict = botsysdict;
    return this;
  }

  public void unsetBotsysdict() {
    this.botsysdict = null;
  }

  /** Returns true if field botsysdict is set (has been assigned a value) and false otherwise */
  public boolean isSetBotsysdict() {
    return this.botsysdict != null;
  }

  public void setBotsysdictIsSet(boolean value) {
    if (!value) {
      this.botsysdict = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DictWord getDictword() {
    return this.dictword;
  }

  public Data setDictword(@org.apache.thrift.annotation.Nullable DictWord dictword) {
    this.dictword = dictword;
    return this;
  }

  public void unsetDictword() {
    this.dictword = null;
  }

  /** Returns true if field dictword is set (has been assigned a value) and false otherwise */
  public boolean isSetDictword() {
    return this.dictword != null;
  }

  public void setDictwordIsSet(boolean value) {
    if (!value) {
      this.dictword = null;
    }
  }

  public int getIntentsSize() {
    return (this.intents == null) ? 0 : this.intents.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Intent> getIntentsIterator() {
    return (this.intents == null) ? null : this.intents.iterator();
  }

  public void addToIntents(Intent elem) {
    if (this.intents == null) {
      this.intents = new java.util.ArrayList<Intent>();
    }
    this.intents.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Intent> getIntents() {
    return this.intents;
  }

  public Data setIntents(@org.apache.thrift.annotation.Nullable java.util.List<Intent> intents) {
    this.intents = intents;
    return this;
  }

  public void unsetIntents() {
    this.intents = null;
  }

  /** Returns true if field intents is set (has been assigned a value) and false otherwise */
  public boolean isSetIntents() {
    return this.intents != null;
  }

  public void setIntentsIsSet(boolean value) {
    if (!value) {
      this.intents = null;
    }
  }

  public int getSlotsSize() {
    return (this.slots == null) ? 0 : this.slots.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<IntentSlot> getSlotsIterator() {
    return (this.slots == null) ? null : this.slots.iterator();
  }

  public void addToSlots(IntentSlot elem) {
    if (this.slots == null) {
      this.slots = new java.util.ArrayList<IntentSlot>();
    }
    this.slots.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<IntentSlot> getSlots() {
    return this.slots;
  }

  public Data setSlots(@org.apache.thrift.annotation.Nullable java.util.List<IntentSlot> slots) {
    this.slots = slots;
    return this;
  }

  public void unsetSlots() {
    this.slots = null;
  }

  /** Returns true if field slots is set (has been assigned a value) and false otherwise */
  public boolean isSetSlots() {
    return this.slots != null;
  }

  public void setSlotsIsSet(boolean value) {
    if (!value) {
      this.slots = null;
    }
  }

  public int getUttersSize() {
    return (this.utters == null) ? 0 : this.utters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<IntentUtter> getUttersIterator() {
    return (this.utters == null) ? null : this.utters.iterator();
  }

  public void addToUtters(IntentUtter elem) {
    if (this.utters == null) {
      this.utters = new java.util.ArrayList<IntentUtter>();
    }
    this.utters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<IntentUtter> getUtters() {
    return this.utters;
  }

  public Data setUtters(@org.apache.thrift.annotation.Nullable java.util.List<IntentUtter> utters) {
    this.utters = utters;
    return this;
  }

  public void unsetUtters() {
    this.utters = null;
  }

  /** Returns true if field utters is set (has been assigned a value) and false otherwise */
  public boolean isSetUtters() {
    return this.utters != null;
  }

  public void setUttersIsSet(boolean value) {
    if (!value) {
      this.utters = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Intent getIntent() {
    return this.intent;
  }

  public Data setIntent(@org.apache.thrift.annotation.Nullable Intent intent) {
    this.intent = intent;
    return this;
  }

  public void unsetIntent() {
    this.intent = null;
  }

  /** Returns true if field intent is set (has been assigned a value) and false otherwise */
  public boolean isSetIntent() {
    return this.intent != null;
  }

  public void setIntentIsSet(boolean value) {
    if (!value) {
      this.intent = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public IntentSlot getSlot() {
    return this.slot;
  }

  public Data setSlot(@org.apache.thrift.annotation.Nullable IntentSlot slot) {
    this.slot = slot;
    return this;
  }

  public void unsetSlot() {
    this.slot = null;
  }

  /** Returns true if field slot is set (has been assigned a value) and false otherwise */
  public boolean isSetSlot() {
    return this.slot != null;
  }

  public void setSlotIsSet(boolean value) {
    if (!value) {
      this.slot = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public IntentUtter getUtter() {
    return this.utter;
  }

  public Data setUtter(@org.apache.thrift.annotation.Nullable IntentUtter utter) {
    this.utter = utter;
    return this;
  }

  public void unsetUtter() {
    this.utter = null;
  }

  /** Returns true if field utter is set (has been assigned a value) and false otherwise */
  public boolean isSetUtter() {
    return this.utter != null;
  }

  public void setUtterIsSet(boolean value) {
    if (!value) {
      this.utter = null;
    }
  }

  public int getDevversSize() {
    return (this.devvers == null) ? 0 : this.devvers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<DevelopVersion> getDevversIterator() {
    return (this.devvers == null) ? null : this.devvers.iterator();
  }

  public void addToDevvers(DevelopVersion elem) {
    if (this.devvers == null) {
      this.devvers = new java.util.ArrayList<DevelopVersion>();
    }
    this.devvers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<DevelopVersion> getDevvers() {
    return this.devvers;
  }

  public Data setDevvers(@org.apache.thrift.annotation.Nullable java.util.List<DevelopVersion> devvers) {
    this.devvers = devvers;
    return this;
  }

  public void unsetDevvers() {
    this.devvers = null;
  }

  /** Returns true if field devvers is set (has been assigned a value) and false otherwise */
  public boolean isSetDevvers() {
    return this.devvers != null;
  }

  public void setDevversIsSet(boolean value) {
    if (!value) {
      this.devvers = null;
    }
  }

  public int getProversSize() {
    return (this.provers == null) ? 0 : this.provers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ProdVersion> getProversIterator() {
    return (this.provers == null) ? null : this.provers.iterator();
  }

  public void addToProvers(ProdVersion elem) {
    if (this.provers == null) {
      this.provers = new java.util.ArrayList<ProdVersion>();
    }
    this.provers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ProdVersion> getProvers() {
    return this.provers;
  }

  public Data setProvers(@org.apache.thrift.annotation.Nullable java.util.List<ProdVersion> provers) {
    this.provers = provers;
    return this;
  }

  public void unsetProvers() {
    this.provers = null;
  }

  /** Returns true if field provers is set (has been assigned a value) and false otherwise */
  public boolean isSetProvers() {
    return this.provers != null;
  }

  public void setProversIsSet(boolean value) {
    if (!value) {
      this.provers = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DevelopVersion getDevver() {
    return this.devver;
  }

  public Data setDevver(@org.apache.thrift.annotation.Nullable DevelopVersion devver) {
    this.devver = devver;
    return this;
  }

  public void unsetDevver() {
    this.devver = null;
  }

  /** Returns true if field devver is set (has been assigned a value) and false otherwise */
  public boolean isSetDevver() {
    return this.devver != null;
  }

  public void setDevverIsSet(boolean value) {
    if (!value) {
      this.devver = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ProdVersion getProver() {
    return this.prover;
  }

  public Data setProver(@org.apache.thrift.annotation.Nullable ProdVersion prover) {
    this.prover = prover;
    return this;
  }

  public void unsetProver() {
    this.prover = null;
  }

  /** Returns true if field prover is set (has been assigned a value) and false otherwise */
  public boolean isSetProver() {
    return this.prover != null;
  }

  public void setProverIsSet(boolean value) {
    if (!value) {
      this.prover = null;
    }
  }

  public int getSessionsSize() {
    return (this.sessions == null) ? 0 : this.sessions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ChatSession> getSessionsIterator() {
    return (this.sessions == null) ? null : this.sessions.iterator();
  }

  public void addToSessions(ChatSession elem) {
    if (this.sessions == null) {
      this.sessions = new java.util.ArrayList<ChatSession>();
    }
    this.sessions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ChatSession> getSessions() {
    return this.sessions;
  }

  public Data setSessions(@org.apache.thrift.annotation.Nullable java.util.List<ChatSession> sessions) {
    this.sessions = sessions;
    return this;
  }

  public void unsetSessions() {
    this.sessions = null;
  }

  /** Returns true if field sessions is set (has been assigned a value) and false otherwise */
  public boolean isSetSessions() {
    return this.sessions != null;
  }

  public void setSessionsIsSet(boolean value) {
    if (!value) {
      this.sessions = null;
    }
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ChatMessage> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(ChatMessage elem) {
    if (this.messages == null) {
      this.messages = new java.util.ArrayList<ChatMessage>();
    }
    this.messages.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ChatMessage> getMessages() {
    return this.messages;
  }

  public Data setMessages(@org.apache.thrift.annotation.Nullable java.util.List<ChatMessage> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ChatSession getSession() {
    return this.session;
  }

  public Data setSession(@org.apache.thrift.annotation.Nullable ChatSession session) {
    this.session = session;
    return this;
  }

  public void unsetSession() {
    this.session = null;
  }

  /** Returns true if field session is set (has been assigned a value) and false otherwise */
  public boolean isSetSession() {
    return this.session != null;
  }

  public void setSessionIsSet(boolean value) {
    if (!value) {
      this.session = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ChatMessage getMessage() {
    return this.message;
  }

  public Data setMessage(@org.apache.thrift.annotation.Nullable ChatMessage message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getCurrpage() {
    return this.currpage;
  }

  public Data setCurrpage(int currpage) {
    this.currpage = currpage;
    setCurrpageIsSet(true);
    return this;
  }

  public void unsetCurrpage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRPAGE_ISSET_ID);
  }

  /** Returns true if field currpage is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrpage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRPAGE_ISSET_ID);
  }

  public void setCurrpageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRPAGE_ISSET_ID, value);
  }

  public int getTotalpage() {
    return this.totalpage;
  }

  public Data setTotalpage(int totalpage) {
    this.totalpage = totalpage;
    setTotalpageIsSet(true);
    return this;
  }

  public void unsetTotalpage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  /** Returns true if field totalpage is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalpage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  public void setTotalpageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPAGE_ISSET_ID, value);
  }

  public int getTotalrows() {
    return this.totalrows;
  }

  public Data setTotalrows(int totalrows) {
    this.totalrows = totalrows;
    setTotalrowsIsSet(true);
    return this;
  }

  public void unsetTotalrows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALROWS_ISSET_ID);
  }

  /** Returns true if field totalrows is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalrows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALROWS_ISSET_ID);
  }

  public void setTotalrowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALROWS_ISSET_ID, value);
  }

  public int getPagesize() {
    return this.pagesize;
  }

  public Data setPagesize(int pagesize) {
    this.pagesize = pagesize;
    setPagesizeIsSet(true);
    return this;
  }

  public void unsetPagesize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPagesizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public Data setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuery() {
    return this.query;
  }

  public Data setQuery(@org.apache.thrift.annotation.Nullable java.lang.String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RC:
      if (value == null) {
        unsetRc();
      } else {
        setRc((java.lang.Integer)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((java.lang.String)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case CHATBOT_ID:
      if (value == null) {
        unsetChatbotID();
      } else {
        setChatbotID((java.lang.String)value);
      }
      break;

    case CUSTOMDICTS:
      if (value == null) {
        unsetCustomdicts();
      } else {
        setCustomdicts((java.util.List<Dict>)value);
      }
      break;

    case SYSDICTS:
      if (value == null) {
        unsetSysdicts();
      } else {
        setSysdicts((java.util.List<Dict>)value);
      }
      break;

    case BOTSYSDICTS:
      if (value == null) {
        unsetBotsysdicts();
      } else {
        setBotsysdicts((java.util.List<BotSysdict>)value);
      }
      break;

    case DICTWORDS:
      if (value == null) {
        unsetDictwords();
      } else {
        setDictwords((java.util.List<DictWord>)value);
      }
      break;

    case CUSTOMDICT:
      if (value == null) {
        unsetCustomdict();
      } else {
        setCustomdict((Dict)value);
      }
      break;

    case SYSDICT:
      if (value == null) {
        unsetSysdict();
      } else {
        setSysdict((Dict)value);
      }
      break;

    case BOTSYSDICT:
      if (value == null) {
        unsetBotsysdict();
      } else {
        setBotsysdict((BotSysdict)value);
      }
      break;

    case DICTWORD:
      if (value == null) {
        unsetDictword();
      } else {
        setDictword((DictWord)value);
      }
      break;

    case INTENTS:
      if (value == null) {
        unsetIntents();
      } else {
        setIntents((java.util.List<Intent>)value);
      }
      break;

    case SLOTS:
      if (value == null) {
        unsetSlots();
      } else {
        setSlots((java.util.List<IntentSlot>)value);
      }
      break;

    case UTTERS:
      if (value == null) {
        unsetUtters();
      } else {
        setUtters((java.util.List<IntentUtter>)value);
      }
      break;

    case INTENT:
      if (value == null) {
        unsetIntent();
      } else {
        setIntent((Intent)value);
      }
      break;

    case SLOT:
      if (value == null) {
        unsetSlot();
      } else {
        setSlot((IntentSlot)value);
      }
      break;

    case UTTER:
      if (value == null) {
        unsetUtter();
      } else {
        setUtter((IntentUtter)value);
      }
      break;

    case DEVVERS:
      if (value == null) {
        unsetDevvers();
      } else {
        setDevvers((java.util.List<DevelopVersion>)value);
      }
      break;

    case PROVERS:
      if (value == null) {
        unsetProvers();
      } else {
        setProvers((java.util.List<ProdVersion>)value);
      }
      break;

    case DEVVER:
      if (value == null) {
        unsetDevver();
      } else {
        setDevver((DevelopVersion)value);
      }
      break;

    case PROVER:
      if (value == null) {
        unsetProver();
      } else {
        setProver((ProdVersion)value);
      }
      break;

    case SESSIONS:
      if (value == null) {
        unsetSessions();
      } else {
        setSessions((java.util.List<ChatSession>)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((java.util.List<ChatMessage>)value);
      }
      break;

    case SESSION:
      if (value == null) {
        unsetSession();
      } else {
        setSession((ChatSession)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((ChatMessage)value);
      }
      break;

    case CURRPAGE:
      if (value == null) {
        unsetCurrpage();
      } else {
        setCurrpage((java.lang.Integer)value);
      }
      break;

    case TOTALPAGE:
      if (value == null) {
        unsetTotalpage();
      } else {
        setTotalpage((java.lang.Integer)value);
      }
      break;

    case TOTALROWS:
      if (value == null) {
        unsetTotalrows();
      } else {
        setTotalrows((java.lang.Integer)value);
      }
      break;

    case PAGESIZE:
      if (value == null) {
        unsetPagesize();
      } else {
        setPagesize((java.lang.Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((java.lang.Integer)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RC:
      return getRc();

    case ERROR:
      return getError();

    case MSG:
      return getMsg();

    case ID:
      return getId();

    case CHATBOT_ID:
      return getChatbotID();

    case CUSTOMDICTS:
      return getCustomdicts();

    case SYSDICTS:
      return getSysdicts();

    case BOTSYSDICTS:
      return getBotsysdicts();

    case DICTWORDS:
      return getDictwords();

    case CUSTOMDICT:
      return getCustomdict();

    case SYSDICT:
      return getSysdict();

    case BOTSYSDICT:
      return getBotsysdict();

    case DICTWORD:
      return getDictword();

    case INTENTS:
      return getIntents();

    case SLOTS:
      return getSlots();

    case UTTERS:
      return getUtters();

    case INTENT:
      return getIntent();

    case SLOT:
      return getSlot();

    case UTTER:
      return getUtter();

    case DEVVERS:
      return getDevvers();

    case PROVERS:
      return getProvers();

    case DEVVER:
      return getDevver();

    case PROVER:
      return getProver();

    case SESSIONS:
      return getSessions();

    case MESSAGES:
      return getMessages();

    case SESSION:
      return getSession();

    case MESSAGE:
      return getMessage();

    case CURRPAGE:
      return getCurrpage();

    case TOTALPAGE:
      return getTotalpage();

    case TOTALROWS:
      return getTotalrows();

    case PAGESIZE:
      return getPagesize();

    case PAGE:
      return getPage();

    case QUERY:
      return getQuery();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RC:
      return isSetRc();
    case ERROR:
      return isSetError();
    case MSG:
      return isSetMsg();
    case ID:
      return isSetId();
    case CHATBOT_ID:
      return isSetChatbotID();
    case CUSTOMDICTS:
      return isSetCustomdicts();
    case SYSDICTS:
      return isSetSysdicts();
    case BOTSYSDICTS:
      return isSetBotsysdicts();
    case DICTWORDS:
      return isSetDictwords();
    case CUSTOMDICT:
      return isSetCustomdict();
    case SYSDICT:
      return isSetSysdict();
    case BOTSYSDICT:
      return isSetBotsysdict();
    case DICTWORD:
      return isSetDictword();
    case INTENTS:
      return isSetIntents();
    case SLOTS:
      return isSetSlots();
    case UTTERS:
      return isSetUtters();
    case INTENT:
      return isSetIntent();
    case SLOT:
      return isSetSlot();
    case UTTER:
      return isSetUtter();
    case DEVVERS:
      return isSetDevvers();
    case PROVERS:
      return isSetProvers();
    case DEVVER:
      return isSetDevver();
    case PROVER:
      return isSetProver();
    case SESSIONS:
      return isSetSessions();
    case MESSAGES:
      return isSetMessages();
    case SESSION:
      return isSetSession();
    case MESSAGE:
      return isSetMessage();
    case CURRPAGE:
      return isSetCurrpage();
    case TOTALPAGE:
      return isSetTotalpage();
    case TOTALROWS:
      return isSetTotalrows();
    case PAGESIZE:
      return isSetPagesize();
    case PAGE:
      return isSetPage();
    case QUERY:
      return isSetQuery();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Data)
      return this.equals((Data)that);
    return false;
  }

  public boolean equals(Data that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rc = true && this.isSetRc();
    boolean that_present_rc = true && that.isSetRc();
    if (this_present_rc || that_present_rc) {
      if (!(this_present_rc && that_present_rc))
        return false;
      if (this.rc != that.rc)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_chatbotID = true && this.isSetChatbotID();
    boolean that_present_chatbotID = true && that.isSetChatbotID();
    if (this_present_chatbotID || that_present_chatbotID) {
      if (!(this_present_chatbotID && that_present_chatbotID))
        return false;
      if (!this.chatbotID.equals(that.chatbotID))
        return false;
    }

    boolean this_present_customdicts = true && this.isSetCustomdicts();
    boolean that_present_customdicts = true && that.isSetCustomdicts();
    if (this_present_customdicts || that_present_customdicts) {
      if (!(this_present_customdicts && that_present_customdicts))
        return false;
      if (!this.customdicts.equals(that.customdicts))
        return false;
    }

    boolean this_present_sysdicts = true && this.isSetSysdicts();
    boolean that_present_sysdicts = true && that.isSetSysdicts();
    if (this_present_sysdicts || that_present_sysdicts) {
      if (!(this_present_sysdicts && that_present_sysdicts))
        return false;
      if (!this.sysdicts.equals(that.sysdicts))
        return false;
    }

    boolean this_present_botsysdicts = true && this.isSetBotsysdicts();
    boolean that_present_botsysdicts = true && that.isSetBotsysdicts();
    if (this_present_botsysdicts || that_present_botsysdicts) {
      if (!(this_present_botsysdicts && that_present_botsysdicts))
        return false;
      if (!this.botsysdicts.equals(that.botsysdicts))
        return false;
    }

    boolean this_present_dictwords = true && this.isSetDictwords();
    boolean that_present_dictwords = true && that.isSetDictwords();
    if (this_present_dictwords || that_present_dictwords) {
      if (!(this_present_dictwords && that_present_dictwords))
        return false;
      if (!this.dictwords.equals(that.dictwords))
        return false;
    }

    boolean this_present_customdict = true && this.isSetCustomdict();
    boolean that_present_customdict = true && that.isSetCustomdict();
    if (this_present_customdict || that_present_customdict) {
      if (!(this_present_customdict && that_present_customdict))
        return false;
      if (!this.customdict.equals(that.customdict))
        return false;
    }

    boolean this_present_sysdict = true && this.isSetSysdict();
    boolean that_present_sysdict = true && that.isSetSysdict();
    if (this_present_sysdict || that_present_sysdict) {
      if (!(this_present_sysdict && that_present_sysdict))
        return false;
      if (!this.sysdict.equals(that.sysdict))
        return false;
    }

    boolean this_present_botsysdict = true && this.isSetBotsysdict();
    boolean that_present_botsysdict = true && that.isSetBotsysdict();
    if (this_present_botsysdict || that_present_botsysdict) {
      if (!(this_present_botsysdict && that_present_botsysdict))
        return false;
      if (!this.botsysdict.equals(that.botsysdict))
        return false;
    }

    boolean this_present_dictword = true && this.isSetDictword();
    boolean that_present_dictword = true && that.isSetDictword();
    if (this_present_dictword || that_present_dictword) {
      if (!(this_present_dictword && that_present_dictword))
        return false;
      if (!this.dictword.equals(that.dictword))
        return false;
    }

    boolean this_present_intents = true && this.isSetIntents();
    boolean that_present_intents = true && that.isSetIntents();
    if (this_present_intents || that_present_intents) {
      if (!(this_present_intents && that_present_intents))
        return false;
      if (!this.intents.equals(that.intents))
        return false;
    }

    boolean this_present_slots = true && this.isSetSlots();
    boolean that_present_slots = true && that.isSetSlots();
    if (this_present_slots || that_present_slots) {
      if (!(this_present_slots && that_present_slots))
        return false;
      if (!this.slots.equals(that.slots))
        return false;
    }

    boolean this_present_utters = true && this.isSetUtters();
    boolean that_present_utters = true && that.isSetUtters();
    if (this_present_utters || that_present_utters) {
      if (!(this_present_utters && that_present_utters))
        return false;
      if (!this.utters.equals(that.utters))
        return false;
    }

    boolean this_present_intent = true && this.isSetIntent();
    boolean that_present_intent = true && that.isSetIntent();
    if (this_present_intent || that_present_intent) {
      if (!(this_present_intent && that_present_intent))
        return false;
      if (!this.intent.equals(that.intent))
        return false;
    }

    boolean this_present_slot = true && this.isSetSlot();
    boolean that_present_slot = true && that.isSetSlot();
    if (this_present_slot || that_present_slot) {
      if (!(this_present_slot && that_present_slot))
        return false;
      if (!this.slot.equals(that.slot))
        return false;
    }

    boolean this_present_utter = true && this.isSetUtter();
    boolean that_present_utter = true && that.isSetUtter();
    if (this_present_utter || that_present_utter) {
      if (!(this_present_utter && that_present_utter))
        return false;
      if (!this.utter.equals(that.utter))
        return false;
    }

    boolean this_present_devvers = true && this.isSetDevvers();
    boolean that_present_devvers = true && that.isSetDevvers();
    if (this_present_devvers || that_present_devvers) {
      if (!(this_present_devvers && that_present_devvers))
        return false;
      if (!this.devvers.equals(that.devvers))
        return false;
    }

    boolean this_present_provers = true && this.isSetProvers();
    boolean that_present_provers = true && that.isSetProvers();
    if (this_present_provers || that_present_provers) {
      if (!(this_present_provers && that_present_provers))
        return false;
      if (!this.provers.equals(that.provers))
        return false;
    }

    boolean this_present_devver = true && this.isSetDevver();
    boolean that_present_devver = true && that.isSetDevver();
    if (this_present_devver || that_present_devver) {
      if (!(this_present_devver && that_present_devver))
        return false;
      if (!this.devver.equals(that.devver))
        return false;
    }

    boolean this_present_prover = true && this.isSetProver();
    boolean that_present_prover = true && that.isSetProver();
    if (this_present_prover || that_present_prover) {
      if (!(this_present_prover && that_present_prover))
        return false;
      if (!this.prover.equals(that.prover))
        return false;
    }

    boolean this_present_sessions = true && this.isSetSessions();
    boolean that_present_sessions = true && that.isSetSessions();
    if (this_present_sessions || that_present_sessions) {
      if (!(this_present_sessions && that_present_sessions))
        return false;
      if (!this.sessions.equals(that.sessions))
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    boolean this_present_session = true && this.isSetSession();
    boolean that_present_session = true && that.isSetSession();
    if (this_present_session || that_present_session) {
      if (!(this_present_session && that_present_session))
        return false;
      if (!this.session.equals(that.session))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_currpage = true && this.isSetCurrpage();
    boolean that_present_currpage = true && that.isSetCurrpage();
    if (this_present_currpage || that_present_currpage) {
      if (!(this_present_currpage && that_present_currpage))
        return false;
      if (this.currpage != that.currpage)
        return false;
    }

    boolean this_present_totalpage = true && this.isSetTotalpage();
    boolean that_present_totalpage = true && that.isSetTotalpage();
    if (this_present_totalpage || that_present_totalpage) {
      if (!(this_present_totalpage && that_present_totalpage))
        return false;
      if (this.totalpage != that.totalpage)
        return false;
    }

    boolean this_present_totalrows = true && this.isSetTotalrows();
    boolean that_present_totalrows = true && that.isSetTotalrows();
    if (this_present_totalrows || that_present_totalrows) {
      if (!(this_present_totalrows && that_present_totalrows))
        return false;
      if (this.totalrows != that.totalrows)
        return false;
    }

    boolean this_present_pagesize = true && this.isSetPagesize();
    boolean that_present_pagesize = true && that.isSetPagesize();
    if (this_present_pagesize || that_present_pagesize) {
      if (!(this_present_pagesize && that_present_pagesize))
        return false;
      if (this.pagesize != that.pagesize)
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRc()) ? 131071 : 524287);
    if (isSetRc())
      hashCode = hashCode * 8191 + rc;

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.hashCode();

    hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
    if (isSetMsg())
      hashCode = hashCode * 8191 + msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetChatbotID()) ? 131071 : 524287);
    if (isSetChatbotID())
      hashCode = hashCode * 8191 + chatbotID.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomdicts()) ? 131071 : 524287);
    if (isSetCustomdicts())
      hashCode = hashCode * 8191 + customdicts.hashCode();

    hashCode = hashCode * 8191 + ((isSetSysdicts()) ? 131071 : 524287);
    if (isSetSysdicts())
      hashCode = hashCode * 8191 + sysdicts.hashCode();

    hashCode = hashCode * 8191 + ((isSetBotsysdicts()) ? 131071 : 524287);
    if (isSetBotsysdicts())
      hashCode = hashCode * 8191 + botsysdicts.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictwords()) ? 131071 : 524287);
    if (isSetDictwords())
      hashCode = hashCode * 8191 + dictwords.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomdict()) ? 131071 : 524287);
    if (isSetCustomdict())
      hashCode = hashCode * 8191 + customdict.hashCode();

    hashCode = hashCode * 8191 + ((isSetSysdict()) ? 131071 : 524287);
    if (isSetSysdict())
      hashCode = hashCode * 8191 + sysdict.hashCode();

    hashCode = hashCode * 8191 + ((isSetBotsysdict()) ? 131071 : 524287);
    if (isSetBotsysdict())
      hashCode = hashCode * 8191 + botsysdict.hashCode();

    hashCode = hashCode * 8191 + ((isSetDictword()) ? 131071 : 524287);
    if (isSetDictword())
      hashCode = hashCode * 8191 + dictword.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntents()) ? 131071 : 524287);
    if (isSetIntents())
      hashCode = hashCode * 8191 + intents.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlots()) ? 131071 : 524287);
    if (isSetSlots())
      hashCode = hashCode * 8191 + slots.hashCode();

    hashCode = hashCode * 8191 + ((isSetUtters()) ? 131071 : 524287);
    if (isSetUtters())
      hashCode = hashCode * 8191 + utters.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntent()) ? 131071 : 524287);
    if (isSetIntent())
      hashCode = hashCode * 8191 + intent.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlot()) ? 131071 : 524287);
    if (isSetSlot())
      hashCode = hashCode * 8191 + slot.hashCode();

    hashCode = hashCode * 8191 + ((isSetUtter()) ? 131071 : 524287);
    if (isSetUtter())
      hashCode = hashCode * 8191 + utter.hashCode();

    hashCode = hashCode * 8191 + ((isSetDevvers()) ? 131071 : 524287);
    if (isSetDevvers())
      hashCode = hashCode * 8191 + devvers.hashCode();

    hashCode = hashCode * 8191 + ((isSetProvers()) ? 131071 : 524287);
    if (isSetProvers())
      hashCode = hashCode * 8191 + provers.hashCode();

    hashCode = hashCode * 8191 + ((isSetDevver()) ? 131071 : 524287);
    if (isSetDevver())
      hashCode = hashCode * 8191 + devver.hashCode();

    hashCode = hashCode * 8191 + ((isSetProver()) ? 131071 : 524287);
    if (isSetProver())
      hashCode = hashCode * 8191 + prover.hashCode();

    hashCode = hashCode * 8191 + ((isSetSessions()) ? 131071 : 524287);
    if (isSetSessions())
      hashCode = hashCode * 8191 + sessions.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessages()) ? 131071 : 524287);
    if (isSetMessages())
      hashCode = hashCode * 8191 + messages.hashCode();

    hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
    if (isSetSession())
      hashCode = hashCode * 8191 + session.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrpage()) ? 131071 : 524287);
    if (isSetCurrpage())
      hashCode = hashCode * 8191 + currpage;

    hashCode = hashCode * 8191 + ((isSetTotalpage()) ? 131071 : 524287);
    if (isSetTotalpage())
      hashCode = hashCode * 8191 + totalpage;

    hashCode = hashCode * 8191 + ((isSetTotalrows()) ? 131071 : 524287);
    if (isSetTotalrows())
      hashCode = hashCode * 8191 + totalrows;

    hashCode = hashCode * 8191 + ((isSetPagesize()) ? 131071 : 524287);
    if (isSetPagesize())
      hashCode = hashCode * 8191 + pagesize;

    hashCode = hashCode * 8191 + ((isSetPage()) ? 131071 : 524287);
    if (isSetPage())
      hashCode = hashCode * 8191 + page;

    hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
    if (isSetQuery())
      hashCode = hashCode * 8191 + query.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRc()).compareTo(other.isSetRc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rc, other.rc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChatbotID()).compareTo(other.isSetChatbotID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatbotID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatbotID, other.chatbotID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomdicts()).compareTo(other.isSetCustomdicts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomdicts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customdicts, other.customdicts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysdicts()).compareTo(other.isSetSysdicts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysdicts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysdicts, other.sysdicts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBotsysdicts()).compareTo(other.isSetBotsysdicts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBotsysdicts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.botsysdicts, other.botsysdicts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDictwords()).compareTo(other.isSetDictwords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictwords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictwords, other.dictwords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomdict()).compareTo(other.isSetCustomdict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomdict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customdict, other.customdict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysdict()).compareTo(other.isSetSysdict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysdict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysdict, other.sysdict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBotsysdict()).compareTo(other.isSetBotsysdict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBotsysdict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.botsysdict, other.botsysdict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDictword()).compareTo(other.isSetDictword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictword, other.dictword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntents()).compareTo(other.isSetIntents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intents, other.intents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlots()).compareTo(other.isSetSlots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slots, other.slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUtters()).compareTo(other.isSetUtters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utters, other.utters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntent()).compareTo(other.isSetIntent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intent, other.intent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlot()).compareTo(other.isSetSlot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot, other.slot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUtter()).compareTo(other.isSetUtter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utter, other.utter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDevvers()).compareTo(other.isSetDevvers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevvers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devvers, other.devvers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProvers()).compareTo(other.isSetProvers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provers, other.provers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDevver()).compareTo(other.isSetDevver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devver, other.devver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProver()).compareTo(other.isSetProver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prover, other.prover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessions()).compareTo(other.isSetSessions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessions, other.sessions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrpage()).compareTo(other.isSetCurrpage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrpage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currpage, other.currpage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalpage()).compareTo(other.isSetTotalpage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalpage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalpage, other.totalpage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalrows()).compareTo(other.isSetTotalrows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalrows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalrows, other.totalrows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPagesize()).compareTo(other.isSetPagesize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, other.pagesize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Data(");
    boolean first = true;

    if (isSetRc()) {
      sb.append("rc:");
      sb.append(this.rc);
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    if (isSetMsg()) {
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetChatbotID()) {
      if (!first) sb.append(", ");
      sb.append("chatbotID:");
      if (this.chatbotID == null) {
        sb.append("null");
      } else {
        sb.append(this.chatbotID);
      }
      first = false;
    }
    if (isSetCustomdicts()) {
      if (!first) sb.append(", ");
      sb.append("customdicts:");
      if (this.customdicts == null) {
        sb.append("null");
      } else {
        sb.append(this.customdicts);
      }
      first = false;
    }
    if (isSetSysdicts()) {
      if (!first) sb.append(", ");
      sb.append("sysdicts:");
      if (this.sysdicts == null) {
        sb.append("null");
      } else {
        sb.append(this.sysdicts);
      }
      first = false;
    }
    if (isSetBotsysdicts()) {
      if (!first) sb.append(", ");
      sb.append("botsysdicts:");
      if (this.botsysdicts == null) {
        sb.append("null");
      } else {
        sb.append(this.botsysdicts);
      }
      first = false;
    }
    if (isSetDictwords()) {
      if (!first) sb.append(", ");
      sb.append("dictwords:");
      if (this.dictwords == null) {
        sb.append("null");
      } else {
        sb.append(this.dictwords);
      }
      first = false;
    }
    if (isSetCustomdict()) {
      if (!first) sb.append(", ");
      sb.append("customdict:");
      if (this.customdict == null) {
        sb.append("null");
      } else {
        sb.append(this.customdict);
      }
      first = false;
    }
    if (isSetSysdict()) {
      if (!first) sb.append(", ");
      sb.append("sysdict:");
      if (this.sysdict == null) {
        sb.append("null");
      } else {
        sb.append(this.sysdict);
      }
      first = false;
    }
    if (isSetBotsysdict()) {
      if (!first) sb.append(", ");
      sb.append("botsysdict:");
      if (this.botsysdict == null) {
        sb.append("null");
      } else {
        sb.append(this.botsysdict);
      }
      first = false;
    }
    if (isSetDictword()) {
      if (!first) sb.append(", ");
      sb.append("dictword:");
      if (this.dictword == null) {
        sb.append("null");
      } else {
        sb.append(this.dictword);
      }
      first = false;
    }
    if (isSetIntents()) {
      if (!first) sb.append(", ");
      sb.append("intents:");
      if (this.intents == null) {
        sb.append("null");
      } else {
        sb.append(this.intents);
      }
      first = false;
    }
    if (isSetSlots()) {
      if (!first) sb.append(", ");
      sb.append("slots:");
      if (this.slots == null) {
        sb.append("null");
      } else {
        sb.append(this.slots);
      }
      first = false;
    }
    if (isSetUtters()) {
      if (!first) sb.append(", ");
      sb.append("utters:");
      if (this.utters == null) {
        sb.append("null");
      } else {
        sb.append(this.utters);
      }
      first = false;
    }
    if (isSetIntent()) {
      if (!first) sb.append(", ");
      sb.append("intent:");
      if (this.intent == null) {
        sb.append("null");
      } else {
        sb.append(this.intent);
      }
      first = false;
    }
    if (isSetSlot()) {
      if (!first) sb.append(", ");
      sb.append("slot:");
      if (this.slot == null) {
        sb.append("null");
      } else {
        sb.append(this.slot);
      }
      first = false;
    }
    if (isSetUtter()) {
      if (!first) sb.append(", ");
      sb.append("utter:");
      if (this.utter == null) {
        sb.append("null");
      } else {
        sb.append(this.utter);
      }
      first = false;
    }
    if (isSetDevvers()) {
      if (!first) sb.append(", ");
      sb.append("devvers:");
      if (this.devvers == null) {
        sb.append("null");
      } else {
        sb.append(this.devvers);
      }
      first = false;
    }
    if (isSetProvers()) {
      if (!first) sb.append(", ");
      sb.append("provers:");
      if (this.provers == null) {
        sb.append("null");
      } else {
        sb.append(this.provers);
      }
      first = false;
    }
    if (isSetDevver()) {
      if (!first) sb.append(", ");
      sb.append("devver:");
      if (this.devver == null) {
        sb.append("null");
      } else {
        sb.append(this.devver);
      }
      first = false;
    }
    if (isSetProver()) {
      if (!first) sb.append(", ");
      sb.append("prover:");
      if (this.prover == null) {
        sb.append("null");
      } else {
        sb.append(this.prover);
      }
      first = false;
    }
    if (isSetSessions()) {
      if (!first) sb.append(", ");
      sb.append("sessions:");
      if (this.sessions == null) {
        sb.append("null");
      } else {
        sb.append(this.sessions);
      }
      first = false;
    }
    if (isSetMessages()) {
      if (!first) sb.append(", ");
      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
    }
    if (isSetSession()) {
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetCurrpage()) {
      if (!first) sb.append(", ");
      sb.append("currpage:");
      sb.append(this.currpage);
      first = false;
    }
    if (isSetTotalpage()) {
      if (!first) sb.append(", ");
      sb.append("totalpage:");
      sb.append(this.totalpage);
      first = false;
    }
    if (isSetTotalrows()) {
      if (!first) sb.append(", ");
      sb.append("totalrows:");
      sb.append(this.totalrows);
      first = false;
    }
    if (isSetPagesize()) {
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
    }
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (botsysdict != null) {
      botsysdict.validate();
    }
    if (dictword != null) {
      dictword.validate();
    }
    if (intent != null) {
      intent.validate();
    }
    if (slot != null) {
      slot.validate();
    }
    if (utter != null) {
      utter.validate();
    }
    if (devver != null) {
      devver.validate();
    }
    if (prover != null) {
      prover.validate();
    }
    if (session != null) {
      session.validate();
    }
    if (message != null) {
      message.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataStandardScheme getScheme() {
      return new DataStandardScheme();
    }
  }

  private static class DataStandardScheme extends org.apache.thrift.scheme.StandardScheme<Data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rc = iprot.readI32();
              struct.setRcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHATBOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatbotID = iprot.readString();
              struct.setChatbotIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CUSTOMDICTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.customdicts = new java.util.ArrayList<Dict>(_list24.size);
                @org.apache.thrift.annotation.Nullable Dict _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new Dict();
                  _elem25.read(iprot);
                  struct.customdicts.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setCustomdictsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYSDICTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.sysdicts = new java.util.ArrayList<Dict>(_list27.size);
                @org.apache.thrift.annotation.Nullable Dict _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new Dict();
                  _elem28.read(iprot);
                  struct.sysdicts.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setSysdictsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BOTSYSDICTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.botsysdicts = new java.util.ArrayList<BotSysdict>(_list30.size);
                @org.apache.thrift.annotation.Nullable BotSysdict _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = new BotSysdict();
                  _elem31.read(iprot);
                  struct.botsysdicts.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setBotsysdictsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DICTWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.dictwords = new java.util.ArrayList<DictWord>(_list33.size);
                @org.apache.thrift.annotation.Nullable DictWord _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = new DictWord();
                  _elem34.read(iprot);
                  struct.dictwords.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setDictwordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUSTOMDICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.customdict = new Dict();
              struct.customdict.read(iprot);
              struct.setCustomdictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SYSDICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sysdict = new Dict();
              struct.sysdict.read(iprot);
              struct.setSysdictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BOTSYSDICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.botsysdict = new BotSysdict();
              struct.botsysdict.read(iprot);
              struct.setBotsysdictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DICTWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dictword = new DictWord();
              struct.dictword.read(iprot);
              struct.setDictwordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.intents = new java.util.ArrayList<Intent>(_list36.size);
                @org.apache.thrift.annotation.Nullable Intent _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new Intent();
                  _elem37.read(iprot);
                  struct.intents.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setIntentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.slots = new java.util.ArrayList<IntentSlot>(_list39.size);
                @org.apache.thrift.annotation.Nullable IntentSlot _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = new IntentSlot();
                  _elem40.read(iprot);
                  struct.slots.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setSlotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UTTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.utters = new java.util.ArrayList<IntentUtter>(_list42.size);
                @org.apache.thrift.annotation.Nullable IntentUtter _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new IntentUtter();
                  _elem43.read(iprot);
                  struct.utters.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setUttersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.intent = new Intent();
              struct.intent.read(iprot);
              struct.setIntentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SLOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slot = new IntentSlot();
              struct.slot.read(iprot);
              struct.setSlotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UTTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.utter = new IntentUtter();
              struct.utter.read(iprot);
              struct.setUtterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DEVVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.devvers = new java.util.ArrayList<DevelopVersion>(_list45.size);
                @org.apache.thrift.annotation.Nullable DevelopVersion _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = new DevelopVersion();
                  _elem46.read(iprot);
                  struct.devvers.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setDevversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PROVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.provers = new java.util.ArrayList<ProdVersion>(_list48.size);
                @org.apache.thrift.annotation.Nullable ProdVersion _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new ProdVersion();
                  _elem49.read(iprot);
                  struct.provers.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setProversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DEVVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.devver = new DevelopVersion();
              struct.devver.read(iprot);
              struct.setDevverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PROVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prover = new ProdVersion();
              struct.prover.read(iprot);
              struct.setProverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SESSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.sessions = new java.util.ArrayList<ChatSession>(_list51.size);
                @org.apache.thrift.annotation.Nullable ChatSession _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = new ChatSession();
                  _elem52.read(iprot);
                  struct.sessions.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setSessionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.messages = new java.util.ArrayList<ChatMessage>(_list54.size);
                @org.apache.thrift.annotation.Nullable ChatMessage _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = new ChatMessage();
                  _elem55.read(iprot);
                  struct.messages.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session = new ChatSession();
              struct.session.read(iprot);
              struct.setSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.message = new ChatMessage();
              struct.message.read(iprot);
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CURRPAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currpage = iprot.readI32();
              struct.setCurrpageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TOTALPAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalpage = iprot.readI32();
              struct.setTotalpageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TOTALROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalrows = iprot.readI32();
              struct.setTotalrowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PAGESIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesize = iprot.readI32();
              struct.setPagesizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRc()) {
        oprot.writeFieldBegin(RC_FIELD_DESC);
        oprot.writeI32(struct.rc);
        oprot.writeFieldEnd();
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.error);
          oprot.writeFieldEnd();
        }
      }
      if (struct.msg != null) {
        if (struct.isSetMsg()) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatbotID != null) {
        if (struct.isSetChatbotID()) {
          oprot.writeFieldBegin(CHATBOT_ID_FIELD_DESC);
          oprot.writeString(struct.chatbotID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customdicts != null) {
        if (struct.isSetCustomdicts()) {
          oprot.writeFieldBegin(CUSTOMDICTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.customdicts.size()));
            for (Dict _iter57 : struct.customdicts)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sysdicts != null) {
        if (struct.isSetSysdicts()) {
          oprot.writeFieldBegin(SYSDICTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sysdicts.size()));
            for (Dict _iter58 : struct.sysdicts)
            {
              _iter58.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.botsysdicts != null) {
        if (struct.isSetBotsysdicts()) {
          oprot.writeFieldBegin(BOTSYSDICTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.botsysdicts.size()));
            for (BotSysdict _iter59 : struct.botsysdicts)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dictwords != null) {
        if (struct.isSetDictwords()) {
          oprot.writeFieldBegin(DICTWORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dictwords.size()));
            for (DictWord _iter60 : struct.dictwords)
            {
              _iter60.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.customdict != null) {
        if (struct.isSetCustomdict()) {
          oprot.writeFieldBegin(CUSTOMDICT_FIELD_DESC);
          struct.customdict.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sysdict != null) {
        if (struct.isSetSysdict()) {
          oprot.writeFieldBegin(SYSDICT_FIELD_DESC);
          struct.sysdict.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.botsysdict != null) {
        if (struct.isSetBotsysdict()) {
          oprot.writeFieldBegin(BOTSYSDICT_FIELD_DESC);
          struct.botsysdict.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dictword != null) {
        if (struct.isSetDictword()) {
          oprot.writeFieldBegin(DICTWORD_FIELD_DESC);
          struct.dictword.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.intents != null) {
        if (struct.isSetIntents()) {
          oprot.writeFieldBegin(INTENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.intents.size()));
            for (Intent _iter61 : struct.intents)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.slots != null) {
        if (struct.isSetSlots()) {
          oprot.writeFieldBegin(SLOTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.slots.size()));
            for (IntentSlot _iter62 : struct.slots)
            {
              _iter62.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.utters != null) {
        if (struct.isSetUtters()) {
          oprot.writeFieldBegin(UTTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.utters.size()));
            for (IntentUtter _iter63 : struct.utters)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intent != null) {
        if (struct.isSetIntent()) {
          oprot.writeFieldBegin(INTENT_FIELD_DESC);
          struct.intent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot != null) {
        if (struct.isSetSlot()) {
          oprot.writeFieldBegin(SLOT_FIELD_DESC);
          struct.slot.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.utter != null) {
        if (struct.isSetUtter()) {
          oprot.writeFieldBegin(UTTER_FIELD_DESC);
          struct.utter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.devvers != null) {
        if (struct.isSetDevvers()) {
          oprot.writeFieldBegin(DEVVERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.devvers.size()));
            for (DevelopVersion _iter64 : struct.devvers)
            {
              _iter64.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.provers != null) {
        if (struct.isSetProvers()) {
          oprot.writeFieldBegin(PROVERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.provers.size()));
            for (ProdVersion _iter65 : struct.provers)
            {
              _iter65.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.devver != null) {
        if (struct.isSetDevver()) {
          oprot.writeFieldBegin(DEVVER_FIELD_DESC);
          struct.devver.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.prover != null) {
        if (struct.isSetProver()) {
          oprot.writeFieldBegin(PROVER_FIELD_DESC);
          struct.prover.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessions != null) {
        if (struct.isSetSessions()) {
          oprot.writeFieldBegin(SESSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sessions.size()));
            for (ChatSession _iter66 : struct.sessions)
            {
              _iter66.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.messages != null) {
        if (struct.isSetMessages()) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
            for (ChatMessage _iter67 : struct.messages)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.session != null) {
        if (struct.isSetSession()) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          struct.message.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurrpage()) {
        oprot.writeFieldBegin(CURRPAGE_FIELD_DESC);
        oprot.writeI32(struct.currpage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalpage()) {
        oprot.writeFieldBegin(TOTALPAGE_FIELD_DESC);
        oprot.writeI32(struct.totalpage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalrows()) {
        oprot.writeFieldBegin(TOTALROWS_FIELD_DESC);
        oprot.writeI32(struct.totalrows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPagesize()) {
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPage()) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataTupleScheme getScheme() {
      return new DataTupleScheme();
    }
  }

  private static class DataTupleScheme extends org.apache.thrift.scheme.TupleScheme<Data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRc()) {
        optionals.set(0);
      }
      if (struct.isSetError()) {
        optionals.set(1);
      }
      if (struct.isSetMsg()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetChatbotID()) {
        optionals.set(4);
      }
      if (struct.isSetCustomdicts()) {
        optionals.set(5);
      }
      if (struct.isSetSysdicts()) {
        optionals.set(6);
      }
      if (struct.isSetBotsysdicts()) {
        optionals.set(7);
      }
      if (struct.isSetDictwords()) {
        optionals.set(8);
      }
      if (struct.isSetCustomdict()) {
        optionals.set(9);
      }
      if (struct.isSetSysdict()) {
        optionals.set(10);
      }
      if (struct.isSetBotsysdict()) {
        optionals.set(11);
      }
      if (struct.isSetDictword()) {
        optionals.set(12);
      }
      if (struct.isSetIntents()) {
        optionals.set(13);
      }
      if (struct.isSetSlots()) {
        optionals.set(14);
      }
      if (struct.isSetUtters()) {
        optionals.set(15);
      }
      if (struct.isSetIntent()) {
        optionals.set(16);
      }
      if (struct.isSetSlot()) {
        optionals.set(17);
      }
      if (struct.isSetUtter()) {
        optionals.set(18);
      }
      if (struct.isSetDevvers()) {
        optionals.set(19);
      }
      if (struct.isSetProvers()) {
        optionals.set(20);
      }
      if (struct.isSetDevver()) {
        optionals.set(21);
      }
      if (struct.isSetProver()) {
        optionals.set(22);
      }
      if (struct.isSetSessions()) {
        optionals.set(23);
      }
      if (struct.isSetMessages()) {
        optionals.set(24);
      }
      if (struct.isSetSession()) {
        optionals.set(25);
      }
      if (struct.isSetMessage()) {
        optionals.set(26);
      }
      if (struct.isSetCurrpage()) {
        optionals.set(27);
      }
      if (struct.isSetTotalpage()) {
        optionals.set(28);
      }
      if (struct.isSetTotalrows()) {
        optionals.set(29);
      }
      if (struct.isSetPagesize()) {
        optionals.set(30);
      }
      if (struct.isSetPage()) {
        optionals.set(31);
      }
      if (struct.isSetQuery()) {
        optionals.set(32);
      }
      oprot.writeBitSet(optionals, 33);
      if (struct.isSetRc()) {
        oprot.writeI32(struct.rc);
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetChatbotID()) {
        oprot.writeString(struct.chatbotID);
      }
      if (struct.isSetCustomdicts()) {
        {
          oprot.writeI32(struct.customdicts.size());
          for (Dict _iter68 : struct.customdicts)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetSysdicts()) {
        {
          oprot.writeI32(struct.sysdicts.size());
          for (Dict _iter69 : struct.sysdicts)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetBotsysdicts()) {
        {
          oprot.writeI32(struct.botsysdicts.size());
          for (BotSysdict _iter70 : struct.botsysdicts)
          {
            _iter70.write(oprot);
          }
        }
      }
      if (struct.isSetDictwords()) {
        {
          oprot.writeI32(struct.dictwords.size());
          for (DictWord _iter71 : struct.dictwords)
          {
            _iter71.write(oprot);
          }
        }
      }
      if (struct.isSetCustomdict()) {
        struct.customdict.write(oprot);
      }
      if (struct.isSetSysdict()) {
        struct.sysdict.write(oprot);
      }
      if (struct.isSetBotsysdict()) {
        struct.botsysdict.write(oprot);
      }
      if (struct.isSetDictword()) {
        struct.dictword.write(oprot);
      }
      if (struct.isSetIntents()) {
        {
          oprot.writeI32(struct.intents.size());
          for (Intent _iter72 : struct.intents)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetSlots()) {
        {
          oprot.writeI32(struct.slots.size());
          for (IntentSlot _iter73 : struct.slots)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetUtters()) {
        {
          oprot.writeI32(struct.utters.size());
          for (IntentUtter _iter74 : struct.utters)
          {
            _iter74.write(oprot);
          }
        }
      }
      if (struct.isSetIntent()) {
        struct.intent.write(oprot);
      }
      if (struct.isSetSlot()) {
        struct.slot.write(oprot);
      }
      if (struct.isSetUtter()) {
        struct.utter.write(oprot);
      }
      if (struct.isSetDevvers()) {
        {
          oprot.writeI32(struct.devvers.size());
          for (DevelopVersion _iter75 : struct.devvers)
          {
            _iter75.write(oprot);
          }
        }
      }
      if (struct.isSetProvers()) {
        {
          oprot.writeI32(struct.provers.size());
          for (ProdVersion _iter76 : struct.provers)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetDevver()) {
        struct.devver.write(oprot);
      }
      if (struct.isSetProver()) {
        struct.prover.write(oprot);
      }
      if (struct.isSetSessions()) {
        {
          oprot.writeI32(struct.sessions.size());
          for (ChatSession _iter77 : struct.sessions)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetMessages()) {
        {
          oprot.writeI32(struct.messages.size());
          for (ChatMessage _iter78 : struct.messages)
          {
            _iter78.write(oprot);
          }
        }
      }
      if (struct.isSetSession()) {
        struct.session.write(oprot);
      }
      if (struct.isSetMessage()) {
        struct.message.write(oprot);
      }
      if (struct.isSetCurrpage()) {
        oprot.writeI32(struct.currpage);
      }
      if (struct.isSetTotalpage()) {
        oprot.writeI32(struct.totalpage);
      }
      if (struct.isSetTotalrows()) {
        oprot.writeI32(struct.totalrows);
      }
      if (struct.isSetPagesize()) {
        oprot.writeI32(struct.pagesize);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(33);
      if (incoming.get(0)) {
        struct.rc = iprot.readI32();
        struct.setRcIsSet(true);
      }
      if (incoming.get(1)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.chatbotID = iprot.readString();
        struct.setChatbotIDIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.customdicts = new java.util.ArrayList<Dict>(_list79.size);
          @org.apache.thrift.annotation.Nullable Dict _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = new Dict();
            _elem80.read(iprot);
            struct.customdicts.add(_elem80);
          }
        }
        struct.setCustomdictsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sysdicts = new java.util.ArrayList<Dict>(_list82.size);
          @org.apache.thrift.annotation.Nullable Dict _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = new Dict();
            _elem83.read(iprot);
            struct.sysdicts.add(_elem83);
          }
        }
        struct.setSysdictsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.botsysdicts = new java.util.ArrayList<BotSysdict>(_list85.size);
          @org.apache.thrift.annotation.Nullable BotSysdict _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new BotSysdict();
            _elem86.read(iprot);
            struct.botsysdicts.add(_elem86);
          }
        }
        struct.setBotsysdictsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list88 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dictwords = new java.util.ArrayList<DictWord>(_list88.size);
          @org.apache.thrift.annotation.Nullable DictWord _elem89;
          for (int _i90 = 0; _i90 < _list88.size; ++_i90)
          {
            _elem89 = new DictWord();
            _elem89.read(iprot);
            struct.dictwords.add(_elem89);
          }
        }
        struct.setDictwordsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.customdict = new Dict();
        struct.customdict.read(iprot);
        struct.setCustomdictIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sysdict = new Dict();
        struct.sysdict.read(iprot);
        struct.setSysdictIsSet(true);
      }
      if (incoming.get(11)) {
        struct.botsysdict = new BotSysdict();
        struct.botsysdict.read(iprot);
        struct.setBotsysdictIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dictword = new DictWord();
        struct.dictword.read(iprot);
        struct.setDictwordIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.intents = new java.util.ArrayList<Intent>(_list91.size);
          @org.apache.thrift.annotation.Nullable Intent _elem92;
          for (int _i93 = 0; _i93 < _list91.size; ++_i93)
          {
            _elem92 = new Intent();
            _elem92.read(iprot);
            struct.intents.add(_elem92);
          }
        }
        struct.setIntentsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.slots = new java.util.ArrayList<IntentSlot>(_list94.size);
          @org.apache.thrift.annotation.Nullable IntentSlot _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = new IntentSlot();
            _elem95.read(iprot);
            struct.slots.add(_elem95);
          }
        }
        struct.setSlotsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.utters = new java.util.ArrayList<IntentUtter>(_list97.size);
          @org.apache.thrift.annotation.Nullable IntentUtter _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = new IntentUtter();
            _elem98.read(iprot);
            struct.utters.add(_elem98);
          }
        }
        struct.setUttersIsSet(true);
      }
      if (incoming.get(16)) {
        struct.intent = new Intent();
        struct.intent.read(iprot);
        struct.setIntentIsSet(true);
      }
      if (incoming.get(17)) {
        struct.slot = new IntentSlot();
        struct.slot.read(iprot);
        struct.setSlotIsSet(true);
      }
      if (incoming.get(18)) {
        struct.utter = new IntentUtter();
        struct.utter.read(iprot);
        struct.setUtterIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.devvers = new java.util.ArrayList<DevelopVersion>(_list100.size);
          @org.apache.thrift.annotation.Nullable DevelopVersion _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = new DevelopVersion();
            _elem101.read(iprot);
            struct.devvers.add(_elem101);
          }
        }
        struct.setDevversIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.provers = new java.util.ArrayList<ProdVersion>(_list103.size);
          @org.apache.thrift.annotation.Nullable ProdVersion _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = new ProdVersion();
            _elem104.read(iprot);
            struct.provers.add(_elem104);
          }
        }
        struct.setProversIsSet(true);
      }
      if (incoming.get(21)) {
        struct.devver = new DevelopVersion();
        struct.devver.read(iprot);
        struct.setDevverIsSet(true);
      }
      if (incoming.get(22)) {
        struct.prover = new ProdVersion();
        struct.prover.read(iprot);
        struct.setProverIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sessions = new java.util.ArrayList<ChatSession>(_list106.size);
          @org.apache.thrift.annotation.Nullable ChatSession _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = new ChatSession();
            _elem107.read(iprot);
            struct.sessions.add(_elem107);
          }
        }
        struct.setSessionsIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messages = new java.util.ArrayList<ChatMessage>(_list109.size);
          @org.apache.thrift.annotation.Nullable ChatMessage _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = new ChatMessage();
            _elem110.read(iprot);
            struct.messages.add(_elem110);
          }
        }
        struct.setMessagesIsSet(true);
      }
      if (incoming.get(25)) {
        struct.session = new ChatSession();
        struct.session.read(iprot);
        struct.setSessionIsSet(true);
      }
      if (incoming.get(26)) {
        struct.message = new ChatMessage();
        struct.message.read(iprot);
        struct.setMessageIsSet(true);
      }
      if (incoming.get(27)) {
        struct.currpage = iprot.readI32();
        struct.setCurrpageIsSet(true);
      }
      if (incoming.get(28)) {
        struct.totalpage = iprot.readI32();
        struct.setTotalpageIsSet(true);
      }
      if (incoming.get(29)) {
        struct.totalrows = iprot.readI32();
        struct.setTotalrowsIsSet(true);
      }
      if (incoming.get(30)) {
        struct.pagesize = iprot.readI32();
        struct.setPagesizeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(32)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

